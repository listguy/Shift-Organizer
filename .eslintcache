[{"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx":"1","/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx":"2","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx":"3","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js":"4","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js":"5","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js":"6","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx":"7","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx":"8"},{"size":506,"mtime":1608938157274,"results":"9","hashOfConfig":"10"},{"size":7469,"mtime":1609268314745,"results":"11","hashOfConfig":"10"},{"size":2714,"mtime":1609268201312,"results":"12","hashOfConfig":"10"},{"size":5342,"mtime":1609259465432,"results":"13","hashOfConfig":"10"},{"size":16537,"mtime":1609262276808,"results":"14","hashOfConfig":"10"},{"size":235,"mtime":1609259354915,"results":"15","hashOfConfig":"10"},{"size":992,"mtime":1609233281468,"results":"16","hashOfConfig":"10"},{"size":7581,"mtime":1609268330937,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1bwibib",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx",[],["43","44"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx",["45","46","47"],"import WeekTable from \"./components/WeekTable\";\nimport { Preference, Student } from \"./shift_organizer_modules/utils/Entities\";\nimport {\n  dayInMS,\n  IOrganizedShiftDay,\n  IPreference,\n  IShift,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"./shift_organizer_modules/utils/interface\";\nimport ShiftManager from \"./shift_organizer_modules/shiftOrginazor\";\nimport { useEffect, useState } from \"react\";\nimport AddStudent from \"./components/AddStudent\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport StudentsDeatails from \"./components/StudentTicket\";\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\nimport { IoCalendarOutline } from \"react-icons/io5\";\nimport { IoIosWarning } from \"react-icons/io\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nconst names: string[] = [\n  \"Nitzan\",\n  \"Nadav\",\n  \"Asaf\",\n  \"Shimon\",\n  \"Anna\",\n  \"Idan\",\n  \"Danel\",\n  \"Lahav\",\n  \"Sean\",\n  \"Omri\",\n];\nconst getRandomDay: () => number = () => Math.floor(Math.random() * 7) + 1;\nconst getRandomWeek: () => number = () => Math.floor(Math.random() * 0) + 1;\nconst getShift: () => number = () => [0, 1, 2][Math.floor(Math.random() * 3)];\nconst getAvailable: () => boolean = () =>\n  Boolean(Math.floor(Math.random() * 2));\n\nconst SM = new ShiftManager();\n\n// const students: IStudent[] =\nnames.map((name: string) => {\n  const newStudent: IStudent = SM.addStudent(name)!;\n  const pref: IPreference = new Preference(\n    newStudent,\n    getRandomWeek() * weekInMs +\n      getRandomDay() * dayInMS +\n      getShift() * shiftInMS,\n    getAvailable()\n  );\n  newStudent.addPreference(pref);\n});\n\nfunction App() {\n  const [students, setStudents] = useState<IStudent[]>(SM.getAllStudents());\n  const [shiftsState, setShiftState] = useState<IOrganizedShiftDay[][]>(\n    SM.getAllShifts()\n  );\n  const [displayedWeek, setDisplayedWeek] = useState<number>(0);\n\n  // Adds a new student to the shift Manager\n  const addStudent: (name: string, sm?: IShiftManager) => IStudent | boolean = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      const newStudent: IStudent = sm.addStudent(name)!;\n      setStudents(sm.getAllStudents());\n      return newStudent;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  const removeStudent: (name: string, sm?: IShiftManager) => boolean | Error = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removeStudent(name);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  };\n\n  const addPreferenceToStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    available: boolean = true,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.addPreferenceToStudent(studentName, available, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const removePreferenceFromStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removePreferenceFromStudent(studentName, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const replaceStudent: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shift: IShift,\n    sm: IShiftManager = SM\n  ) => {\n    const studentToAssign: IStudent | undefined = sm.getStudent(studentName);\n    if (!studentToAssign) return false;\n\n    sm.assignStudentToShift(studentToAssign, shift);\n\n    setStudents(sm.getAllStudents());\n    return true;\n  };\n\n  const organizeShifts: () => void = () => {\n    if (students.length < 7) {\n      Swal.fire({\n        title: \"Hey!\",\n        text: `Only ${students.length} ${\n          students.length > 1 ? \"students are\" : \"student is\"\n        } saved in the system. Procceed?`,\n        showDenyButton: true,\n        confirmButtonText: \"Yes\",\n        denyButtonText: \"No\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          SM.organize();\n          setShiftState(SM.getAllShifts());\n        }\n      });\n    } else {\n      SM.organize();\n      setShiftState(SM.getAllShifts());\n    }\n  };\n\n  const handleLeft: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev - 1));\n\n  const handleRight: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev + 1));\n\n  const warnings: string[] = SM.getWarnings();\n\n  return (\n    <>\n      <WarningMsgContainer>\n        {warnings.map((msg: string) => (\n          <WarningMessage>\n            <IoIosWarning style={{ margin: \"0 10px\", fontSize: \"1.2em\" }} />\n            {msg}\n          </WarningMessage>\n        ))}\n      </WarningMsgContainer>\n      <MainTitle style={{ textAlign: \"center\" }}>\n        Shift Organizer <IoCalendarOutline />\n      </MainTitle>\n      <MainButtonsRow>\n        <AddStudent addFunction={addStudent} />\n        <div onClick={organizeShifts}>Organize!</div>\n      </MainButtonsRow>\n      <StudentsDeatails\n        students={students}\n        addPref={addPreferenceToStudent}\n        rmvPref={removePreferenceFromStudent}\n        rmvStudent={removeStudent}\n      />\n      <ButtonsRow>\n        <ArrowButton opdir={false} onClick={handleLeft}>\n          <FaCaretLeft />\n        </ArrowButton>\n        <span>Week {displayedWeek + 1}</span>\n        <ArrowButton opdir={true} onClick={handleRight}>\n          <FaCaretRight />\n        </ArrowButton>\n      </ButtonsRow>\n      <WeekTable\n        shifts={shiftsState[displayedWeek]}\n        replaceFunc={replaceStudent}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n//helpers\nfunction clamp(max: number, min: number, value: number): number {\n  return Math.max(min, Math.min(max, value));\n}\nconst MainTitle = styled.h1`\n  font-size: 3.8em;\n  margin-bottom: 3vh;\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 2vh;\n  span {\n    font-size: 2em;\n    height: 100%;\n  }\n`;\n\nconst MainButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1.5vh;\n  div {\n    background-color: wheat;\n    color: rgb(149, 7, 38);\n    font-weight: bold;\n    padding: 14px 8px;\n    width: fit-content;\n    font-size: 1.1em;\n    border-radius: 15px;\n    margin: 0 1vw;\n    cursor: pointer;\n    transition: 0.1s ease-in-out;\n  }\n\n  div:hover {\n    transform: translate(0px, -5px);\n    box-shadow: 0px 0px 4px 4px rgba(236, 234, 197, 0.8);\n  }\n`;\n\nconst ArrowButton = styled.div`\n  font-size: 3em;\n  margin: 0 2vw;\n  cursor: pointer;\n  transition: 0.15s ease-in-out;\n\n  :hover {\n    transform: translate(\n      ${(props: { opdir: boolean }) => (props.opdir ? \"5px\" : \"-5px\")},\n      0\n    );\n  }\n`;\n\nconst WarningMsgContainer = styled.div`\n  position: absolute;\n  width: 100vw;\n  top: 0;\n  z-index: 2;\n`;\nconst WarningMessage = styled.div`\n  background-color: rgba(238, 106, 18, 0.65);\n  color: #3d0101;\n  width: 8vw;\n  height: 2vh;\n  margin: 0.5vh;\n  padding: 6px 2px;\n  border-radius: 5px;\n  font-size: 0.9em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  transition: 0.2s ease-in-out;\n\n  :hover {\n    width: 60vh;\n  }\n`;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx",["48"],"import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport {\n  IOrganizedShiftDay,\n  IShift,\n  IShiftManager,\n} from \"../shift_organizer_modules/utils/interface\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport default function WeekTable({\n  shifts,\n  replaceFunc,\n}: {\n  shifts: IOrganizedShiftDay[];\n  replaceFunc: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error;\n}) {\n  const promptRepModal = useCallback(async (shift: IShift) => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter Student to Assign Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | Error = replaceFunc(name, shift);\n      if (sucess) {\n        Swal.fire(\n          \"Woohoo!\",\n          `Student ${name} was assigned successfuly!`,\n          \"success\"\n        );\n      } else {\n        Swal.fire(\"Oops..\", `can't assign ${name} to this shift :(`, \"error\");\n      }\n    }\n  }, []);\n\n  return (\n    <TableWrapper>\n      {shifts?.map((shiftDay: IOrganizedShiftDay, i: number) => (\n        <TableColumn>\n          <h2>{daysInWeek[i]}</h2>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getMorning())}>\n            <span>Morning</span>\n            {shiftDay?.getMorning()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getNoon())}>\n            <span>Noon</span>\n            {shiftDay?.getNoon()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getEvening())}>\n            <span>Evening</span>\n            {shiftDay?.getEvening()?.chosen?.name}\n          </ShiftDay>\n        </TableColumn>\n      ))}{\" \"}\n    </TableWrapper>\n  );\n}\n\nconst TableWrapper = styled.div`\n  display: flex;\n  width: 90vw;\n  min-height: 40vh;\n  margin: 0 auto;\n`;\n\nconst TableColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 14%;\n  margin: 0 auto;\n  text-align: center;\n\n  h2 {\n    font-size: 2em;\n    text-shadow: 0px 0px 4px #f7f2f2;\n  }\n`;\n\nconst ShiftDay = styled.div`\n  background-color: rgb(149, 7, 38);\n  display: flex;\n  flex-direction: column;\n  height: 30%;\n  margin: 3% 2%;\n  padding: 4px;\n  font-size: 1.5em;\n  border-radius: 10px;\n  font-style: italic;\n  box-shadow: 0px 0px 6px 4px rgba(116, 8, 31, 0.8);\n\n  span {\n    font-weight: bold;\n    font-style: initial;\n    margin-bottom: 4%;\n  }\n`;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js",["49","50","51"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./interface\");\nconst daysInWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuseday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n];\nclass Shift {\n    constructor(day, week, time, special = false) {\n        this.unavailable = [];\n        this.day = day;\n        this.week = week;\n        this.time = time;\n        this.isSpecial = special;\n        this.timeStamp =\n            week * interface_1.weekInMs +\n                day * interface_1.dayInMS +\n                interface_1.shiftInMS * (time === \"morning\" ? 0 : time === \"noon\" ? 1 : 2);\n    }\n    assignStudent(student) {\n        this.chosen = student;\n        student.addShift(this);\n    }\n    unassignStudent() {\n        this.chosen?.removeShift(this);\n        this.chosen = undefined;\n    }\n    addUnavailable(student) {\n        this.unavailable.push(student);\n    }\n    isStudentUnavailable(student) {\n        return this.unavailable.includes(student);\n    }\n    printUnavailable() {\n        const formated = this.unavailable.map((student) => student.name);\n        console.log(formated);\n    }\n    isAdjacent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return (otherShift.timeStamp === this.timeStamp - interface_1.shiftInMS ||\n            otherShift.timeStamp === this.timeStamp + interface_1.shiftInMS);\n    }\n    hasSameStudent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return otherShift.chosen === this.chosen;\n    }\n    prettyPrintTime() {\n        return `${daysInWeek[this.day]}, ${this.time} week ${this.week + 1}`;\n    }\n}\nexports.Shift = Shift;\nclass Student {\n    constructor(name) {\n        this.shifts = [];\n        this.preferences = [];\n        this.name = name;\n    }\n    addShift(shift) {\n        this.shifts.push(shift);\n    }\n    removeShift(shift) {\n        this.shifts = this.shifts.filter((s) => s != shift);\n    }\n    printShifts() {\n        const formated = this.shifts.map((shift) => {\n            return { day: shift.day, time: shift.time };\n        });\n        console.log(formated);\n    }\n    hasPreference(pref) {\n        return (this.preferences.findIndex((p) => p.getTimeString() === pref.getTimeString() &&\n            p.available === pref.available) !== -1);\n    }\n    addPreference(preference) {\n        if (preference instanceof Preference === false)\n            throw new Error(`Expected an object of type Preferene but got ${typeof preference} instead`);\n        if (this.preferences.find((pref) => pref.shiftTimeStamp === preference.shiftTimeStamp)) {\n            throw new Error(`A Preference in this time already exists for this student`);\n        }\n        this.preferences.push(preference);\n        return true;\n    }\n    removePreference(shiftToRemoveTimestamp) {\n        const prefIndex = this.preferences.findIndex((pref) => pref.shiftTimeStamp === shiftToRemoveTimestamp);\n        if (prefIndex === -1) {\n            throw new Error(\"Student does not have a preference for this shift\");\n        }\n        console.log(\"here\");\n        this.preferences.splice(prefIndex, 1);\n    }\n    getPreferences() {\n        return this.preferences.slice();\n    }\n    printPreferences() {\n        this.preferences.map((preference) => console.log(preference));\n    }\n}\nexports.Student = Student;\nclass Preference {\n    constructor(student, shiftTimeStamp, available) {\n        this.student = student;\n        this.shiftTimeStamp = shiftTimeStamp;\n        this.available = available;\n        this.handled = false;\n    }\n    getTimeObject() {\n        const week = Math.floor(this.shiftTimeStamp / interface_1.weekInMs);\n        const day = Math.floor((this.shiftTimeStamp - interface_1.weekInMs * week) / interface_1.dayInMS);\n        const shiftIndex = Math.floor((this.shiftTimeStamp - week * interface_1.weekInMs - day * interface_1.dayInMS) / interface_1.shiftInMS);\n        const time = shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n        return { week, day, time };\n    }\n    getTimeString() {\n        const { week, day, time } = this.getTimeObject();\n        return `${daysInWeek[day]}, ${time}, week ${week + 1}`;\n    }\n}\nexports.Preference = Preference;\nclass OrginizedShiftDay {\n    constructor(morning, noon, evening, ...arr) {\n        this.morning = morning || arr[0];\n        this.noon = noon || arr[1];\n        this.evening = evening || arr[2];\n    }\n    getMorning() {\n        return this.morning;\n    }\n    getNoon() {\n        return this.noon;\n    }\n    getEvening() {\n        return this.evening;\n    }\n    getAllShifts() {\n        return [this.morning, this.noon, this.evening];\n    }\n    getShiftByTime(time) {\n        switch (time) {\n            case \"morning\":\n                return this.morning;\n            case \"noon\":\n                return this.noon;\n            case \"evening\":\n                return this.evening;\n        }\n        console.log(\"Time is ilegal. Should be one of morning, noon, evening\");\n    }\n}\nexports.OrginizedShiftDay = OrginizedShiftDay;\n// let s1 = new Shift(1, \"a\");\n// let s2 = new Shift(2, \"b\");\n// s1.addUnavailable(new Student(\"bob\"));\n// s2.addUnavailable(new Student(\"mo\"));\n// console.log(s1.unavailable);\n// console.log(s2.unavailable);\n",["52","53"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js",["54","55"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./utils/interface\");\nconst lodash_1 = require(\"lodash\");\nconst Entities_1 = require(\"./utils/Entities\");\nclass ShiftManager {\n    constructor() {\n        this.students = [];\n        this.shifts = [];\n        this.initShifts();\n        this.HeuristicTreshold = 0;\n        this.WeekendTreshold = 0;\n    }\n    addStudent(name) {\n        name = lodash_1.capitalize(name.toLowerCase());\n        const exist = this.students.findIndex((student) => student.name === name) !==\n            -1;\n        if (exist) {\n            throw new Error(\"Student already exist\");\n        }\n        const newStudent = new Entities_1.Student(name);\n        this.students.push(newStudent);\n        this.HeuristicTreshold = calculateTreshold(this.students.length, this.shifts.length * 7);\n        this.WeekendTreshold = (4 * 6) / this.students.length;\n        return newStudent;\n    }\n    removeStudent(name) {\n        name = lodash_1.capitalize(name.toLowerCase());\n        const indexOfStudent = this.students.findIndex((student) => student.name === name);\n        if (indexOfStudent === -1) {\n            throw new Error(\"Student does not exist\");\n        }\n        this.students.splice(indexOfStudent, 1);\n        this.syncShiftsAndStudents();\n        this.HeuristicTreshold = calculateTreshold(this.students.length, this.shifts.length * 7);\n        this.WeekendTreshold = (4 * 6) / this.students.length;\n        return;\n    }\n    getStudent(name) {\n        name = lodash_1.capitalize(name.toLowerCase());\n        return this.students.find((student) => student.name === name);\n    }\n    getAllStudents() {\n        return this.students.slice();\n    }\n    addPreferenceToStudent(name, available, shiftTimestamp) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        if (shiftTimestamp < 0 ||\n            shiftTimestamp > 4 * interface_1.weekInMs ||\n            shiftTimestamp % interface_1.shiftInMS !== 0) {\n            throw new Error(`Timestamp is ilegal. Check it is positive, not larger than ${4 * interface_1.weekInMs} and points to the begining of the shift`);\n        }\n        const newPref = new Entities_1.Preference(student, shiftTimestamp, available);\n        try {\n            student.addPreference(newPref);\n            return true;\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n    removePreferenceFromStudent(name, shiftToRemoveTimestamp) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        if (shiftToRemoveTimestamp < 0 ||\n            shiftToRemoveTimestamp > 4 * interface_1.weekInMs ||\n            shiftToRemoveTimestamp % interface_1.shiftInMS !== 0) {\n            throw new Error(`Timestamp is ilegal. Check it is positive, not larger than ${4 * interface_1.weekInMs} and points to the begining of the shift`);\n        }\n        try {\n            student.removePreference(shiftToRemoveTimestamp);\n            return true;\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n    getShift(week, day, time) {\n        // return this.shifts.find(\n        //   (shift: IShift) => shift.day === day && shift.time === time\n        // );\n        if (!this.shifts[week - 1])\n            return undefined;\n        return this.shifts[week - 1][day - 1]?.getShiftByTime(time);\n    }\n    getShiftByStamp(stamp) {\n        const week = Math.floor(stamp / interface_1.weekInMs);\n        const day = Math.floor((stamp - interface_1.weekInMs * week) / interface_1.dayInMS);\n        const shiftIndex = Math.floor((stamp - week * interface_1.weekInMs - day * interface_1.dayInMS) / interface_1.shiftInMS);\n        const time = shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n        return this.getShift(week + 1, day + 1, time);\n    }\n    getAllShifts() {\n        return this.shifts.slice();\n    }\n    assignStudentToShift(student, shift) {\n        shift.unassignStudent();\n        shift.assignStudent(student);\n    }\n    organize() {\n        // this.initShifts();\n        const shifts = this.shifts;\n        const students = this.students;\n        const availablePreferences = [];\n        const unavailablePreferences = [];\n        // will help to keep track of the students number of shifts\n        // const numberOfShiftsOfStudent: { name: string; counter: number }[] = students.map(\n        //   (student: IStudent) => {\n        //     return { name: student.name, counter: 0 };\n        //   }\n        // );\n        console.log(students);\n        const numberOfShiftsOfStudent = students.reduce((prev, student) => {\n            //TODO fix this\n            //@ts-ignore\n            prev[student.name] = 0;\n            return prev;\n        }, {});\n        students.forEach((student) => student.preferences.forEach((preference) => {\n            if (preference.available) {\n                availablePreferences.push(preference);\n            }\n            else {\n                unavailablePreferences.push(preference);\n            }\n        }));\n        //first, assign all available preferences\n        availablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.getTimeObject();\n            // const desiredShift: IShift = shifts[week][day].getShiftByTime(time)!;\n            const desiredShift = this.getShift(week + 1, day + 1, time);\n            if (desiredShift.chosen) {\n                // if chosen sudent has the current pref, continue\n                if (desiredShift.chosen.hasPreference(pref))\n                    return;\n            }\n            // desiredShift.assignStudent(pref.student);\n            this.assignStudentToShift(pref.student, desiredShift);\n            pref.handled = true;\n            //TODO fix this\n            //@ts-ignore\n            numberOfShiftsOfStudent[pref.student] += 1;\n        });\n        // assign all unavailable preferences\n        unavailablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.getTimeObject();\n            const undesiredShift = shifts[week][day].getShiftByTime(time);\n            undesiredShift.addUnavailable(pref.student);\n            pref.handled = true;\n        });\n        // assign all other students to shifts\n        const organizedShifts = minConflicts(shifts, students, 1000, this.HeuristicTreshold, this);\n        this.shifts = organizedShifts;\n        console.log(this.HeuristicTreshold);\n        return organizedShifts;\n    }\n    // returns all problems with current solution\n    getWarnings() {\n        // Possible problems:\n        // - 2 shifts in a row\n        // - too many weekend shifts\n        // - assigned to a shift he asked not to\n        const problems = [];\n        for (let student of this.students) {\n            let weekendCounter = 0;\n            student.shifts.sort((a, b) => a.timeStamp - b.timeStamp);\n            for (let i = 0; i < student.shifts.length; i++) {\n                if (student.shifts[i].isAdjacent(student.shifts[i + 1]))\n                    problems.push(`Student ${student.name} has consecutive shifts on ${student.shifts[i].prettyPrintTime()}`);\n                if (student.shifts[i].isStudentUnavailable(student))\n                    problems.push(`Student ${student.name} was assigned a shift on ${student.shifts[i].prettyPrintTime()}, but preferes not to`);\n                if (student.shifts[i].isSpecial)\n                    weekendCounter++;\n            }\n            if (weekendCounter > this.WeekendTreshold + 1)\n                problems.push(`Student ${student.name} Has ${weekendCounter} weekend Shifts. ${Math.floor(weekendCounter - this.WeekendTreshold)} more than allowed.`);\n        }\n        return problems;\n    }\n    initShifts() {\n        this.shifts = [0, 1, 2, 3].map((week) => [0, 1, 2, 3, 4, 5, 6].map((day) => {\n            return day >= 5\n                ? new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\", true), new Entities_1.Shift(day, week, \"noon\", true), new Entities_1.Shift(day, week, \"evening\", true))\n                : new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\"), new Entities_1.Shift(day, week, \"noon\"), new Entities_1.Shift(day, week, \"evening\"));\n        }));\n    }\n    syncShiftsAndStudents() {\n        //Unassigns students who no longer exist in student list from shifts\n        // this.shifts = this.shifts.map((shiftsWeek:IOrganizedShiftDay[])=>shiftsWeek.map((shiftDay:IOrganizedShiftDay)=>shift))\n        for (let weekShifts of this.shifts) {\n            for (let dayShifts of weekShifts) {\n                for (let shift of dayShifts.getAllShifts()) {\n                    if (!shift.chosen)\n                        continue;\n                    if (!this.students.includes(shift.chosen)) {\n                        shift.unassignStudent();\n                    }\n                }\n            }\n        }\n    }\n    cloneShifts() {\n        // created a copy for min conflicts to work on and modify.\n        return this.shifts.map((shiftsWeek) => shiftsWeek.map((shiftsDay) => new Entities_1.OrginizedShiftDay(undefined, undefined, undefined, ...shiftsDay\n            .getAllShifts()\n            .map((shift) => new Entities_1.Shift(shift.day, shift.week, shift.time, shift.isSpecial)))));\n    }\n    cloneStudents() {\n        return this.students.map((student) => {\n            const copyStudent = new Entities_1.Student(student.name);\n            return copyStudent;\n        });\n    }\n}\nexports.default = ShiftManager;\n//Min conflicts Algo pseudo code\n/*function MinConflicts(csp:any, max_steps:number) {\n  //csp:\n  //max_steps: number of steps before giving up\n\n  current = initial assigment for csp\n  for i=1 to max_steps do\n    if current is a solution for csp\n      return current\n    const randomVar = randomly chosen conflicted variable in csp\n    const value = the value for randomVar that minimizes conflicts\n    set var = value in current\n  \n\n  return failure\n} */\nfunction minConflicts(csp, students, maxSteps, treshold, SM) {\n    let current = csp;\n    for (let i = 1; i < maxSteps; i++) {\n        console.log(i);\n        if (shiftsAreOrganized(current, treshold, SM))\n            return current;\n        let randomConflict = getRandomConflict(csp, treshold);\n        let value = minimizeConflictsIn(randomConflict, students);\n        SM.assignStudentToShift(value, randomConflict);\n    }\n    return current;\n}\nfunction shiftsAreOrganized(currentState, treshold, SM) {\n    // checks if current shifts in state are fine organized:\n    let legal = true;\n    for (let shiftWeek of currentState) {\n        for (let shiftDay of shiftWeek) {\n            for (let curShift of shiftDay.getAllShifts()) {\n                if (!curShift.chosen) {\n                    legal = false;\n                    break;\n                }\n                if (curShift.isStudentUnavailable(curShift.chosen)) {\n                    legal = false;\n                    break;\n                }\n                const nextShift = SM.getShiftByStamp(curShift.timeStamp + interface_1.shiftInMS);\n                const prevShift = SM.getShiftByStamp(curShift.timeStamp - interface_1.shiftInMS);\n                if (curShift.hasSameStudent(nextShift) ||\n                    curShift.hasSameStudent(prevShift)) {\n                    legal = false;\n                    break;\n                }\n            }\n        }\n    }\n    return legal;\n}\nfunction getRandomConflict(csp, treshold) {\n    // get a random unassigned shift\n    let availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift) => !shift.chosen);\n    if (!availableShifts.length) {\n        availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift, index, shiftsArr) => shift.hasSameStudent(shiftsArr[index + 1]) ||\n            shift.hasSameStudent(shiftsArr[index - 1]) ||\n            shift.isStudentUnavailable(shift.chosen));\n    }\n    if (availableShifts.length === 0) {\n        console.log(\"Should have quit!\");\n    }\n    return availableShifts[Math.floor(Math.random() * availableShifts.length)];\n}\nfunction minimizeConflictsIn(conflictedShift, students) {\n    // assign a student that will minimize the conflicts\n    const conflictsOfStudents = students.map((student) => {\n        return { conflicts: getConflictsWith(student, conflictedShift), student };\n    });\n    const leastConflictedStudent = conflictsOfStudents.sort((a, b) => a.conflicts - b.conflicts)[0];\n    console.log(leastConflictedStudent);\n    return leastConflictedStudent.student;\n}\nfunction getConflictsWith(student, shift) {\n    // sum of shift count between the student's shifts\n    if (student.shifts.length <= 1) {\n        return shift.isAdjacent(student.shifts[0]) ? 1 : 0;\n    }\n    if (shift.isStudentUnavailable(student))\n        return 1;\n    const distanceBetweenShifts = student.shifts\n        .map((shift) => shift.timeStamp)\n        .concat(shift.timeStamp)\n        .sort((a, b) => a - b)\n        .reduce((sum, curShiftTime, index, shiftsArr) => {\n        // console.log(shiftsArr);\n        if (index === shiftsArr.length - 1)\n            return sum;\n        return sum + (shiftsArr[index + 1] - curShiftTime) / interface_1.shiftInMS;\n    }, 0);\n    return 1 / (distanceBetweenShifts / student.shifts.length);\n}\nfunction evaluateCurrentShiftsOf(student) {\n    if (student.shifts.length <= 1)\n        return 1;\n    return (1 /\n        student.shifts\n            .map((shift) => shift.timeStamp)\n            .sort((a, b) => a - b)\n            .reduce((sum, curShiftTime, index, shiftsArr) => {\n            // console.log(shiftsArr);\n            if (index === shiftsArr.length - 1)\n                return sum;\n            return sum + (shiftsArr[index + 1] - curShiftTime) / interface_1.shiftInMS;\n        }, 0));\n}\nfunction calculateTreshold(sumStudents, sumShifts) {\n    // return (\n    //   1 /\n    //   ((sumStudents * (Math.floor(sumShifts / sumStudents) - 1)) /\n    //     (Math.floor(sumShifts / sumStudents) + 1))\n    // );\n    return 1 / (sumStudents - 1);\n}\n//#region nothing to see here ...\n// function initShifts(): IOrganizedShiftDay[] {\n//   class OrginizedShiftDay implements IOrganizedShiftDay {\n//     private morning: IShift;\n//     private noon: IShift;\n//     private evening: IShift;\n//     constructor(morning: IShift, noon: IShift, evening: IShift) {\n//       this.morning = morning;\n//       this.noon = noon;\n//       this.evening = evening;\n//     }\n//     getMorning(): IShift {\n//       return this.morning;\n//     }\n//     getNoon(): IShift {\n//       return this.noon;\n//     }\n//     getEvening(): IShift {\n//       return this.evening;\n//     }\n//     getAllShifts(): IShift[] {\n//       return [this.morning, this.noon, this.evening];\n//     }\n//   }\n//   // return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//   // return {\n//   // getMorning: () => new Shift(day, \"morning\"),\n//   //\n//   // morning: new Shift(day, \"morning\"),\n//   // noon: new Shift(day, \"noon\"),\n//   // evening: new Shift(day, \"evening\"),\n//   // getShiftIterator: () => [],\n//   // };\n//   // });\n//   // }\n//   return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//     return new OrginizedShiftDay(\n//       new Shift(day, \"morning\"),\n//       new Shift(day, \"noon\"),\n//       new Shift(day, \"evening\")\n//     );\n//   });\n// }\n// const names: string[] = [\n//   \"Nitzan\",\n//   \"Nadav\",\n//   \"Asaf\",\n//   \"Shimon\",\n//   \"Anna\",\n//   \"Idan\",\n//   \"Danel\",\n//   \"Lahav\",\n//   \"Sean\",\n//   \"Omri\",\n// ];\n// const getRandomDay: () => number = () => Math.floor(Math.random() * 7);\n// const getShift: () => string = () =>\n//   [\"morning\", \"noon\", \"evening\"][Math.floor(Math.random() * 3)];\n// const getAvailable: () => boolean = () =>\n//   Boolean(Math.floor(Math.random() * 2));\n// const students: IStudent[] = names.map((name: string) => {\n//   const newStudent: IStudent = new Student(name);\n//   const pref: IPreference = new Preference(\n//     newStudent,\n//     { day: getRandomDay(), time: getShift() },\n//     getAvailable()\n//   );\n//   newStudent.addPreference(pref);\n//   return newStudent;\n// });\n// const sm = new ShiftManager();\n// console.log(sm.organize(students, 3).forEach((day) => console.log(day)));\n// students.forEach((student) => student.printPreferences());\n//#endregion\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js",["56"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hourInMS = 1000 * 60 * 60;\nexports.dayInMS = 24 * exports.hourInMS;\nexports.weekInMs = 7 * exports.dayInMS;\nexports.shiftInMS = 8 * exports.hourInMS;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx",["57"],"import React, { useCallback } from \"react\";\nimport Swal from \"sweetalert2\";\nimport {\n  IShiftManager,\n  IStudent,\n} from \"../shift_organizer_modules/utils/interface\";\n\nexport default function AddStudent({\n  addFunction,\n}: {\n  addFunction: (name: string, sm?: IShiftManager) => IStudent | boolean;\n}) {\n  const promptModal = useCallback(async () => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter New Student's Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | IStudent = addFunction(name);\n      if (sucess) {\n        Swal.fire(\"Woohoo!\", `Student ${name} added!`, \"success\");\n      } else {\n        Swal.fire(\"Oops..\", `Student ${name} alredy exists!`, \"error\");\n      }\n    }\n  }, []);\n\n  return <div onClick={promptModal}>Add Student</div>;\n}\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx",["58","59","60"],"import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport {\n  dayInMS,\n  IPreference,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"../shift_organizer_modules/utils/interface\";\nimport { FaTrashAlt } from \"react-icons/fa\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst dayOptions: string = [0, 1, 2, 3, 4, 5, 6].reduce(\n  (prev: string, i: number) =>\n    prev + `<option value=${i}>${daysInWeek[i]}</option>`,\n  \"\"\n);\n\nexport default function StudentsDeatails({\n  students,\n  addPref,\n  rmvPref,\n  rmvStudent,\n}: {\n  students: IStudent[];\n  addPref: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | Error;\n  rmvPref: (studentName: string, shiftTimeStamp: number) => boolean | Error;\n  rmvStudent: (studentName: string) => boolean | Error;\n}) {\n  const promptAddModal = useCallback(async (studentName: string) => {\n    const { value: formValue } = await Swal.fire({\n      title: \"Enter Preference Details\",\n      html:\n        `<br/>` +\n        `<em>Week</em> <select id=\"pref-modal-week\">${[0, 1, 2, 3].reduce(\n          (prev: string, i: number) =>\n            prev + `<option value=${i}>week ${i + 1}</option>`,\n          \"\"\n        )}<select>  ` +\n        `<em>Day</em> <select id=\"pref-modal-day\">${dayOptions}<select>   ` +\n        `<em>Shift</em> <select id=\"pref-modal-time\"><option value=0>morning</option><option value=1>noon</option><option value=2>evening</option><select>` +\n        `<br/><br/><input type=\"checkbox\" id=\"pref-modal-av\" class=\"swal-input\">  <em>Available</em></input>`,\n      showCancelButton: true,\n      preConfirm: () => {\n        return [\n          //@ts-ignore\n          document.getElementById(\"pref-modal-week\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-day\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-time\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-av\")?.checked,\n        ];\n      },\n    });\n\n    if (formValue) {\n      const sucess: boolean | Error = addPref(\n        studentName,\n        weekInMs * parseInt(formValue[0]) +\n          dayInMS * parseInt(formValue[1]) +\n          shiftInMS * parseInt(formValue[2]),\n        formValue[3]\n      );\n      if (sucess === true) {\n        Swal.fire(\"Woohoo!\", `Preference was added!`, \"success\");\n      } else {\n        if (sucess instanceof Error)\n          Swal.fire(\"Oops...\", sucess.message, \"error\");\n        else Swal.fire(\"Oops...\", \"Unknown error occured :( \\n Sorry...\");\n      }\n    }\n    // Swal.fire(JSON.stringify(formValue));\n  }, []);\n\n  const promptRmvModal = useCallback(\n    async (pref: IPreference, student: IStudent) => {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: `Delete prefrence ${pref.getTimeString()} for ${student.name}?`,\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonColor: \"#3085d6\",\n        confirmButtonColor: \"#d33\",\n        // cancelButtonText:\"Delete\",\n        confirmButtonText: \"Delete\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          const succeed: boolean | Error = rmvPref(\n            student.name,\n            pref.shiftTimeStamp\n          );\n          if (succeed === true) {\n            Swal.fire(\"Deleted!\", \"\", \"success\");\n          } else {\n            console.log(succeed);\n            Swal.fire(\"oops...\", \"\", \"error\");\n          }\n        }\n      });\n    },\n    []\n  );\n\n  const promptRmvStudentModal = useCallback(async (studentName: string) => {\n    Swal.fire({\n      title: `Delete student ${studentName}?`,\n      text: `This is irreversiable!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonColor: \"#d33\",\n      confirmButtonText: \"Delete\",\n    }).then((result: SweetAlertResult) => {\n      if (result.isConfirmed) {\n        const succeed: boolean | Error = rmvStudent(studentName);\n        if (succeed === true) {\n          Swal.fire(\"OK\", `Student ${studentName} deleted`, \"success\");\n        } else {\n          if (succeed instanceof Error) {\n            console.log(succeed);\n            Swal.fire(\"oops...\", succeed.message, \"error\");\n          }\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <Wrapper data-flick>\n      {students.map((student: IStudent) => (\n        <Ticket key={`student-${student.name}`} className=\"caroucell\">\n          <Header>\n            <h3>{student.name}</h3>\n            {/* @ts-ignore */}\n            <StyledButton\n              bgcolor=\"#5f0101\"\n              onClick={() => promptRmvStudentModal(student.name)}\n            >\n              Remove Student\n            </StyledButton>\n          </Header>\n          <PrefList>\n            {student.getPreferences().map((pref: IPreference, i: number) => (\n              <PrefRow\n                key={`pref-${student.name}-${i}`}\n                available={pref.available}\n              >\n                {pref.getTimeString()}\n                {pref.handled ? \"V\" : \"X\"}\n                <TrashButton onClick={() => promptRmvModal(pref, student)}>\n                  <FaTrashAlt />\n                </TrashButton>\n              </PrefRow>\n            ))}\n          </PrefList>\n          {/* @ts-ignore */}\n          <StyledButton onClick={() => promptAddModal(student.name)}>\n            Add Pref\n          </StyledButton>\n        </Ticket>\n      ))}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  /* background-color: red; */\n  display: flex;\n  /* justify-content: center; */\n  width: 100%;\n  height: 28vh;\n  min-height: 24vh;\n  margin: auto;\n  overflow-x: auto;\n  ::-webkit-scrollbar {\n    height: 5px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: rgba(15, 15, 15, 0.6);\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst Ticket = styled.div`\n  background-color: rgb(23, 20, 20);\n  color: wheat;\n  display: flex;\n  flex-direction: column;\n  margin: 10px 2vw;\n  min-width: 20%;\n  width: 20%;\n  height: 82%;\n  padding: 8px 12px;\n  border-radius: 5px;\n  box-shadow: -3px 4px 8px 2px rgba(240, 250, 252, 0.8);\n`;\n\nconst Header = styled.div`\n  display: grid;\n  align-items: flex-end;\n  grid-template-columns: 3fr 1.8fr;\n  margin-bottom: 10px;\n  h3 {\n    margin: 3%;\n    font-size: 2.2em;\n  }\n`;\nconst PrefList = styled.div`\n  /* background-color: green; */\n  height: 65%;\n  overflow-y: auto;\n  ::-webkit-scrollbar {\n    width: 2px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\nconst PrefRow = styled.div`\n  background-color: ${(props: { available: boolean }) =>\n    props.available ? \"#1a641e\" : \"rgb(126,5,5)\"};\n  /* color: rgb(126, 11, 11); */\n  display: grid;\n  grid-template-columns: 9fr 1fr;\n  margin: 1% 0;\n  padding: 1% 2%;\n`;\nconst TrashButton = styled.span`\n  color: rgb(238, 34, 56);\n  font-size: 1.2em;\n`;\nconst StyledButton = styled.span`\n  background-color: ${(props: { bgcolor: string }) =>\n    props.bgcolor ? props.bgcolor : \"#928619\"};\n  color: #e0dede;\n  width: fit-content;\n  height: fit-content;\n  padding: 8px 5px;\n  border-radius: 10px;\n  font-size: 0.9em;\n  cursor: pointer;\n`;\n",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":22,"nodeType":"67","messageId":"68","endLine":2,"endColumn":29},{"ruleId":"65","severity":1,"message":"69","line":14,"column":10,"nodeType":"67","messageId":"68","endLine":14,"endColumn":19},{"ruleId":"70","severity":1,"message":"71","line":44,"column":26,"nodeType":"72","messageId":"73","endLine":44,"endColumn":28},{"ruleId":"74","severity":1,"message":"75","line":55,"column":6,"nodeType":"76","endLine":55,"endColumn":8,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","messageId":"81","endLine":1,"endColumn":14,"fix":"82"},{"ruleId":"83","severity":1,"message":"84","line":69,"column":51,"nodeType":"85","messageId":"86","endLine":69,"endColumn":53},{"ruleId":"87","severity":1,"message":"88","line":145,"column":9,"nodeType":"89","messageId":"90","endLine":152,"endColumn":10},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","messageId":"81","endLine":1,"endColumn":14,"fix":"91"},{"ruleId":"92","severity":1,"message":"93","line":316,"column":10,"nodeType":"67","messageId":"68","endLine":316,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","messageId":"81","endLine":1,"endColumn":14,"fix":"94"},{"ruleId":"74","severity":1,"message":"95","line":33,"column":6,"nodeType":"76","endLine":33,"endColumn":8,"suggestions":"96"},{"ruleId":"74","severity":1,"message":"97","line":90,"column":6,"nodeType":"76","endLine":90,"endColumn":8,"suggestions":"98"},{"ruleId":"74","severity":1,"message":"99","line":118,"column":5,"nodeType":"76","endLine":118,"endColumn":7,"suggestions":"100"},{"ruleId":"74","severity":1,"message":"101","line":143,"column":6,"nodeType":"76","endLine":143,"endColumn":8,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'Student' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'replaceFunc'. Either include it or remove the dependency array. If 'replaceFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["105"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"106","text":"107"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"108","text":"107"},"no-unused-vars","'evaluateCurrentShiftsOf' is defined but never used.",{"range":"109","text":"107"},"React Hook useCallback has a missing dependency: 'addFunction'. Either include it or remove the dependency array. If 'addFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["110"],"React Hook useCallback has a missing dependency: 'addPref'. Either include it or remove the dependency array. If 'addPref' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["111"],"React Hook useCallback has a missing dependency: 'rmvPref'. Either include it or remove the dependency array. If 'rmvPref' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["112"],"React Hook useCallback has a missing dependency: 'rmvStudent'. Either include it or remove the dependency array. If 'rmvStudent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},[0,13],"",[0,13],[0,13],{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [replaceFunc]",{"range":"124","text":"125"},"Update the dependencies array to be: [addFunction]",{"range":"126","text":"127"},"Update the dependencies array to be: [addPref]",{"range":"128","text":"129"},"Update the dependencies array to be: [rmvPref]",{"range":"130","text":"131"},"Update the dependencies array to be: [rmvStudent]",{"range":"132","text":"133"},[1282,1284],"[replaceFunc]",[929,931],"[addFunction]",[2792,2794],"[addPref]",[3655,3657],"[rmvPref]",[4442,4444],"[rmvStudent]"]