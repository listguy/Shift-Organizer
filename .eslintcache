[{"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx":"1","/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx":"2","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx":"3","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js":"4","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js":"5"},{"size":506,"mtime":1608554795022,"results":"6","hashOfConfig":"7"},{"size":1642,"mtime":1608556989552,"results":"8","hashOfConfig":"7"},{"size":1352,"mtime":1608556343988,"results":"9","hashOfConfig":"7"},{"size":1717,"mtime":1608562809638,"results":"10","hashOfConfig":"7"},{"size":7264,"mtime":1608562685045,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1bwibib",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26","usedDeprecatedRules":"23"},"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx",[],["27","28"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx",[],"/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx",[],["29","30"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js",["31","32"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Shift {\n    constructor(day, time) {\n        this.unavailable = [];\n        this.day = day;\n        this.time = time;\n    }\n    assignStudent(student) {\n        this.chosen = student;\n    }\n    addUnavailable(student) {\n        this.unavailable.push(student);\n    }\n    isStudentUnavailable(student) {\n        return this.unavailable.includes(student);\n    }\n    printUnavailable() {\n        const formated = this.unavailable.map((student) => student.name);\n        console.log(formated);\n    }\n}\nexports.Shift = Shift;\nclass Student {\n    constructor(name) {\n        this.shifts = [];\n        this.preferences = [];\n        this.name = name;\n    }\n    addShift(shift) {\n        this.shifts.push(shift);\n    }\n    removeShift(shift) {\n        this.shifts = this.shifts.filter((s) => s != shift);\n    }\n    printShifts() {\n        const formated = this.shifts.map((shift) => {\n            return { day: shift.day, time: shift.time };\n        });\n        console.log(formated);\n    }\n    addPreference(preference) {\n        this.preferences.push(preference);\n    }\n    printPreferences() {\n        this.preferences.map((preference) => console.log(preference));\n    }\n}\nexports.Student = Student;\nclass Preference {\n    constructor(student, shift, available) {\n        this.student = student;\n        this.shift = shift;\n        this.available = available;\n        this.handled = false;\n    }\n}\nexports.Preference = Preference;\n// let s1 = new Shift(1, \"a\");\n// let s2 = new Shift(2, \"b\");\n// s1.addUnavailable(new Student(\"bob\"));\n// s2.addUnavailable(new Student(\"mo\"));\n// console.log(s1.unavailable);\n// console.log(s2.unavailable);\n",["33","34"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js",["35","36"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst Entities_1 = require(\"./utils/Entities\");\nfunction orginizeShifts(students) {\n    // returns 21 organized shifts (for week)\n    if (students.length < 7)\n        throw \"at least 7 students are needed!\";\n    const shifts = initShifts();\n    const availablePreferences = [];\n    const unavailablePreferences = [];\n    // will help to keep track of the students number of shifts\n    // const numberOfShiftsOfStudent: { name: string; counter: number }[] = students.map(\n    //   (student: IStudent) => {\n    //     return { name: student.name, counter: 0 };\n    //   }\n    // );\n    const numberOfShiftsOfStudent = students.reduce((prev, student) => {\n        //TODO fix this\n        //@ts-ignore\n        prev[student.name] = 0;\n        return prev;\n    }, {});\n    students.forEach((student) => student.preferences.forEach((preference) => {\n        if (preference.available) {\n            availablePreferences.push(preference);\n        }\n        else {\n            unavailablePreferences.push(preference);\n        }\n    }));\n    //first, assign all available preferences\n    availablePreferences.forEach((pref) => {\n        //TODO fix this\n        // @ts-ignore\n        const desiredShift = shifts[pref.shift.day][pref.shift.time];\n        if (desiredShift.chosen)\n            return;\n        desiredShift.assignStudent(pref.student);\n        pref.handled = true;\n        //TODO fix this\n        //@ts-ignore\n        numberOfShiftsOfStudent[pref.student] += 1;\n    });\n    // assign all unavailable preferences\n    unavailablePreferences.forEach((pref) => {\n        //TODO fix this\n        //@ts-ignore\n        const undesiredShift = shifts[pref.shift.day][pref.shift.time];\n        undesiredShift.addUnavailable(pref.student);\n        pref.handled = true;\n    });\n    // assign all other students to shifts\n    // old 'dumb' fnnction\n    // shifts.forEach((shiftsDay: IOrganizedShiftDay) => {\n    //   Object.keys(shiftsDay).forEach((key: string) => {\n    //     //TODO fix type\n    //     //@ts-ignore\n    //     const currentShift = shiftsDay[key];\n    //     for (let student of students) {\n    //       if (currentShift.chosen) continue;\n    //       if (currentShift.isStudentUnavailable(student)) continue;\n    //       if (numberOfShiftsOfStudent[student.name] === 3) continue;\n    //       currentShift.assignStudent(student);\n    //       numberOfShiftsOfStudent[student.name] += 1;\n    //       break;\n    //     }\n    //     if (!currentShift.chosen) throw \"a Shift with no student! stopping\";\n    //   });\n    // });\n    //min conflicts\n    return minConflicts(shifts, 35);\n}\nexports.default = orginizeShifts;\n//Min conflicts Algo pseudo code\n/*function MinConflicts(csp:any, max_steps:number) {\n  //csp:\n  //max_steps: number of steps before giving up\n\n  current = initial assigment for csp\n  for i=1 to max_steps do\n    if current is a solution for csp\n      return current\n    const randomVar = randomly chosen conflicted variable in csp\n    const value = the value for randomVar that minimizes conflicts\n    set var = value in current\n  \n\n  return failure\n} */\nfunction minConflicts(csp, maxSteps) {\n    let current = csp;\n    for (let i = 1; i < maxSteps; i++) {\n        console.log(i);\n        if (shiftsAreOrganized(current))\n            return current;\n        let randomConflict = getRandomConflict(csp);\n        let value = minimizeConflictsIn(randomConflict);\n        if (randomConflict.chosen) {\n            randomConflict.chosen.removeShift(randomConflict);\n        }\n        randomConflict.assignStudent(value);\n        value.addShift(randomConflict);\n    }\n    return current;\n}\nfunction shiftsAreOrganized(currentState) {\n    // checks if current shifts in state are fine organized:\n    // * no students are assigned to shifts where they appear unavailable\n    // * no student has two straight shifts - MISSING\n    // * all shifts are assigned\n    let legal = true;\n    // currentState.forEach((shiftDay: IOrganizedShiftDay) => {\n    for (let shiftDay in currentState) {\n        // Object.keys(shiftDay).forEach((key: string) => {\n        for (let key in Object.keys(shiftDay)) {\n            // @ts-ignore\n            let curShift = shiftDay[key];\n            if (!curShift.chosen) {\n                legal = false;\n                break;\n            }\n            if (curShift.unavailable.includes(curShift.chosen)) {\n                legal = false;\n                break;\n            }\n        }\n        // });\n    }\n    // });\n    return legal;\n}\nfunction getRandomConflict(csp) {\n    // get a random unassigned shift\n    let availableShifts = lodash_1.flatMap(csp, (shiftDay) => [\n        shiftDay.morning,\n        shiftDay.noon,\n        shiftDay.evening,\n    ]).filter((shift) => !shift.chosen);\n    if (!availableShifts.length) {\n        availableShifts = lodash_1.flatMap(csp, (shiftDay) => [\n            shiftDay.morning,\n            shiftDay.noon,\n            shiftDay.evening,\n        ]).filter((shift) => getConflicts(shift.chosen, shift) >= 4);\n        console.log(\"happend\");\n    }\n    console.log(availableShifts.length);\n    return availableShifts[Math.floor(Math.random() * availableShifts.length)];\n}\nfunction minimizeConflictsIn(conflictedShift) {\n    // assign a student that will minimize the conflicts\n    const conflictsOfStudents = students.map((student) => {\n        return { conflicts: getConflicts(student, conflictedShift), student };\n    });\n    const leastConflictedStudent = conflictsOfStudents.sort((a, b) => a.conflicts - b.conflicts)[0];\n    console.log(leastConflictedStudent);\n    return leastConflictedStudent.student;\n}\nfunction getConflicts(student, shift) {\n    // 3 pts if unavailable for this shift\n    // a point for each shift he has\n    // 2 points for each shift in a row\n    let conflictPts = 0;\n    if (shift.unavailable.includes(student))\n        conflictPts += 3;\n    conflictPts += student.shifts.length;\n    conflictPts += student.shifts.reduce((sum, cShift) => shift.day === cShift.day ||\n        shift.day + 1 === cShift.day ||\n        shift.day - 1 === cShift.day\n        ? sum * 2\n        : sum, 2);\n    return conflictPts;\n}\nfunction initShifts() {\n    return [0, 1, 2, 3, 4, 5, 6].map((day) => {\n        return {\n            morning: new Entities_1.Shift(day, \"morning\"),\n            noon: new Entities_1.Shift(day, \"noon\"),\n            evening: new Entities_1.Shift(day, \"evening\"),\n        };\n    });\n}\nconst names = [\n    \"Nitzan\",\n    \"Nadav\",\n    \"Asaf\",\n    \"Shimon\",\n    \"Anna\",\n    \"Idan\",\n    \"Danel\",\n    \"Lahav\",\n    \"Sean\",\n    \"Omri\",\n];\nconst getRandomDay = () => Math.floor(Math.random() * 7);\nconst getShift = () => [\"morning\", \"noon\", \"evening\"][Math.floor(Math.random() * 3)];\nconst getAvailable = () => Boolean(Math.floor(Math.random() * 2));\nconst students = names.map((name) => {\n    const newStudent = new Entities_1.Student(name);\n    const pref = new Entities_1.Preference(newStudent, { day: getRandomDay(), time: getShift() }, getAvailable());\n    newStudent.addPreference(pref);\n    return newStudent;\n});\nconsole.log(orginizeShifts(students).forEach((day) => console.log(day)));\nstudents.forEach((student) => student.printPreferences());\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":1,"nodeType":"45","messageId":"46","endLine":1,"endColumn":14,"fix":"47"},{"ruleId":"48","severity":1,"message":"49","line":34,"column":51,"nodeType":"50","messageId":"51","endLine":34,"endColumn":53},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":1,"nodeType":"45","messageId":"46","endLine":1,"endColumn":14,"fix":"52"},{"ruleId":"53","severity":1,"message":"54","line":8,"column":9,"nodeType":"55","messageId":"56","endLine":8,"endColumn":49},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],["57"],["58"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"59","text":"60"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"range":"61","text":"60"},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",[0,13],"",[0,13]]