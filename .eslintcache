[{"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx":"1","/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx":"2","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx":"3","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js":"4","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js":"5","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js":"6"},{"size":506,"mtime":1608938157274,"results":"7","hashOfConfig":"8"},{"size":2979,"mtime":1608938258281,"results":"9","hashOfConfig":"8"},{"size":1368,"mtime":1608935661559,"results":"10","hashOfConfig":"8"},{"size":3506,"mtime":1608937478602,"results":"11","hashOfConfig":"8"},{"size":11055,"mtime":1608935775863,"results":"12","hashOfConfig":"8"},{"size":234,"mtime":1608935574893,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bwibib",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30","usedDeprecatedRules":"24"},"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx",[],"/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx",["31","32"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx",[],["33","34"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js",["35","36","37","38"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./interface\");\nclass Shift {\n    constructor(day, week, time, special = false) {\n        this.unavailable = [];\n        this.day = day;\n        this.week = week;\n        this.time = time;\n        this.isSpecial = special;\n        this.timeStamp =\n            week * interface_1.weekInMs +\n                day * interface_1.dayInMS +\n                interface_1.shiftInMS * (time === \"morning\" ? 0 : time === \"noon\" ? 1 : 2);\n    }\n    assignStudent(student) {\n        this.chosen = student;\n    }\n    addUnavailable(student) {\n        this.unavailable.push(student);\n    }\n    isStudentUnavailable(student) {\n        return this.unavailable.includes(student);\n    }\n    printUnavailable() {\n        const formated = this.unavailable.map((student) => student.name);\n        console.log(formated);\n    }\n    isAdjacent(otherShift) {\n        return (otherShift.timeStamp === this.timeStamp - interface_1.shiftInMS ||\n            otherShift.timeStamp === this.timeStamp + interface_1.shiftInMS);\n    }\n}\nexports.Shift = Shift;\nclass Student {\n    constructor(name) {\n        this.shifts = [];\n        this.preferences = [];\n        this.name = name;\n    }\n    addShift(shift) {\n        this.shifts.push(shift);\n    }\n    removeShift(shift) {\n        this.shifts = this.shifts.filter((s) => s != shift);\n    }\n    printShifts() {\n        const formated = this.shifts.map((shift) => {\n            return { day: shift.day, time: shift.time };\n        });\n        console.log(formated);\n    }\n    addPreference(preference) {\n        if (preference instanceof Preference === false)\n            throw new Error(`Expected an object of type Preferene but got ${typeof preference} instead`);\n        this.preferences.push(preference);\n    }\n    removePreference(shift) {\n        const prefIndex = this.preferences.findIndex((pref) => pref.shift === shift);\n        if (!prefIndex) {\n            throw \"Student doe sno have a preference for this shift\";\n        }\n        this.preferences.splice(prefIndex, 1);\n    }\n    printPreferences() {\n        this.preferences.map((preference) => console.log(preference));\n    }\n}\nexports.Student = Student;\nclass Preference {\n    constructor(student, shift, available) {\n        this.student = student;\n        this.shift = shift;\n        this.available = available;\n        this.handled = false;\n    }\n}\nexports.Preference = Preference;\nclass OrginizedShiftDay {\n    constructor(morning, noon, evening, ...arr) {\n        this.morning = morning || arr[0];\n        this.noon = noon || arr[1];\n        this.evening = evening || arr[2];\n    }\n    getMorning() {\n        return this.morning;\n    }\n    getNoon() {\n        return this.noon;\n    }\n    getEvening() {\n        return this.evening;\n    }\n    getAllShifts() {\n        return [this.morning, this.noon, this.evening];\n    }\n    getShiftByTime(time) {\n        switch (time) {\n            case \"morning\":\n                return this.morning;\n            case \"noon\":\n                return this.noon;\n            case \"evening\":\n                return this.evening;\n        }\n        console.log(\"Time is ilegal. Should be one of morning, noon, evening\");\n    }\n}\nexports.OrginizedShiftDay = OrginizedShiftDay;\n// let s1 = new Shift(1, \"a\");\n// let s2 = new Shift(2, \"b\");\n// s1.addUnavailable(new Student(\"bob\"));\n// s2.addUnavailable(new Student(\"mo\"));\n// console.log(s1.unavailable);\n// console.log(s2.unavailable);\n",["39","40"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js",["41"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst Entities_1 = require(\"./utils/Entities\");\nclass ShiftManager {\n    constructor() {\n        this.students = [];\n        this.shifts = [];\n        this.initShifts();\n    }\n    addStudent(name) {\n        const exist = this.students.findIndex((student) => student.name === name) !==\n            -1;\n        if (exist) {\n            throw new Error(\"Student already exist\");\n        }\n        const newStudent = new Entities_1.Student(name);\n        this.students.push(newStudent);\n        return newStudent;\n    }\n    removeStudent(name) {\n        const indexOfStudent = this.students.findIndex((student) => student.name === name);\n        if (indexOfStudent === -1) {\n            throw new Error(\"Student does not exist\");\n        }\n        this.students.splice(indexOfStudent, 1);\n    }\n    getStudent(name) {\n        return this.students.find((student) => student.name === name);\n    }\n    addPreferenceToStudent(name, available, shift) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        const newPref = new Entities_1.Preference(student, shift, available);\n        student.addPreference(newPref);\n    }\n    removePreferenceFromStudent(name, shift) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        try {\n            student.removePreference(shift);\n        }\n        catch (e) {\n            throw new Error(e);\n        }\n    }\n    getShift(week, day, time) {\n        // return this.shifts.find(\n        //   (shift: IShift) => shift.day === day && shift.time === time\n        // );\n        return this.shifts[week - 1][day - 1].getShiftByTime(time);\n    }\n    assignStudentToShift(student, shift) {\n        shift.assignStudent(student);\n    }\n    organize(students, weeks = 4) {\n        // if (students.length < 7) throw new Error(\"at least 7 students are needed!\");\n        const shifts = this.cloneShifts();\n        const availablePreferences = [];\n        const unavailablePreferences = [];\n        // will help to keep track of the students number of shifts\n        // const numberOfShiftsOfStudent: { name: string; counter: number }[] = students.map(\n        //   (student: IStudent) => {\n        //     return { name: student.name, counter: 0 };\n        //   }\n        // );\n        const numberOfShiftsOfStudent = students.reduce((prev, student) => {\n            //TODO fix this\n            //@ts-ignore\n            prev[student.name] = 0;\n            return prev;\n        }, {});\n        students.forEach((student) => student.preferences.forEach((preference) => {\n            if (preference.available) {\n                availablePreferences.push(preference);\n            }\n            else {\n                unavailablePreferences.push(preference);\n            }\n        }));\n        //first, assign all available preferences\n        availablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.shift;\n            const desiredShift = shifts[week - 1][day - 1].getShiftByTime(time);\n            if (desiredShift.chosen)\n                return;\n            desiredShift.assignStudent(pref.student);\n            pref.handled = true;\n            //TODO fix this\n            //@ts-ignore\n            numberOfShiftsOfStudent[pref.student] += 1;\n        });\n        // assign all unavailable preferences\n        unavailablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.shift;\n            const undesiredShift = shifts[week - 1][day - 1].getShiftByTime(time);\n            undesiredShift.addUnavailable(pref.student);\n            pref.handled = true;\n        });\n        // assign all other students to shifts\n        //min conflicts\n        console.log(\"the shifts!\");\n        console.log(this.shifts);\n        return minConflicts(shifts, students, 200);\n    }\n    initShifts() {\n        this.shifts = [0, 1, 2, 3].map((week) => [0, 1, 2, 3, 4, 5, 6].map((day) => {\n            return day >= 5\n                ? new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\", true), new Entities_1.Shift(day, week, \"noon\", true), new Entities_1.Shift(day, week, \"evening\", true))\n                : new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\"), new Entities_1.Shift(day, week, \"noon\"), new Entities_1.Shift(day, week, \"evening\"));\n        }));\n    }\n    cloneShifts() {\n        // created a copy for min conflicts to work on and modify.\n        return this.shifts.map((shiftsWeek) => shiftsWeek.map((shiftsDay) => new Entities_1.OrginizedShiftDay(undefined, undefined, undefined, ...shiftsDay\n            .getAllShifts()\n            .map((shift) => new Entities_1.Shift(shift.day, shift.week, shift.time, shift.isSpecial)))));\n    }\n    cloneStudents() {\n        return this.students.map((student) => {\n            const copyStudent = new Entities_1.Student(student.name);\n            return copyStudent;\n        });\n    }\n}\nexports.default = ShiftManager;\n//Min conflicts Algo pseudo code\n/*function MinConflicts(csp:any, max_steps:number) {\n  //csp:\n  //max_steps: number of steps before giving up\n\n  current = initial assigment for csp\n  for i=1 to max_steps do\n    if current is a solution for csp\n      return current\n    const randomVar = randomly chosen conflicted variable in csp\n    const value = the value for randomVar that minimizes conflicts\n    set var = value in current\n  \n\n  return failure\n} */\nfunction minConflicts(csp, students, maxSteps) {\n    let current = csp;\n    for (let i = 1; i < maxSteps; i++) {\n        // debugger;\n        console.log(i);\n        if (shiftsAreOrganized(current))\n            return current;\n        let randomConflict = getRandomConflict(csp);\n        let value = minimizeConflictsIn(randomConflict, students);\n        if (randomConflict.chosen) {\n            randomConflict.chosen.removeShift(randomConflict);\n        }\n        randomConflict.assignStudent(value);\n        value.addShift(randomConflict);\n    }\n    return current;\n}\nfunction shiftsAreOrganized(currentState) {\n    // checks if current shifts in state are fine organized:\n    // * no students are assigned to shifts where they appear unavailable\n    // * no student has more than 8 conflicts\n    // * all shifts are assigned\n    let legal = true;\n    for (let shiftWeek of currentState) {\n        for (let shiftDay of shiftWeek) {\n            for (let curShift of shiftDay.getAllShifts()) {\n                if (!curShift.chosen) {\n                    legal = false;\n                    break;\n                }\n                if (curShift.unavailable.includes(curShift.chosen)) {\n                    legal = false;\n                    break;\n                }\n                if (getConflicts(curShift.chosen, curShift) >= 5) {\n                    legal = false;\n                    break;\n                }\n            }\n        }\n    }\n    return legal;\n}\nfunction getRandomConflict(csp) {\n    // get a random unassigned shift\n    let availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift) => !shift.chosen);\n    if (!availableShifts.length) {\n        availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift) => getConflicts(shift.chosen, shift) >= 4.5);\n        console.log(\"happend\");\n    }\n    console.log(availableShifts.length);\n    return availableShifts[Math.floor(Math.random() * availableShifts.length)];\n}\nfunction minimizeConflictsIn(conflictedShift, students) {\n    // assign a student that will minimize the conflicts\n    const conflictsOfStudents = students.map((student) => {\n        return { conflicts: getConflicts(student, conflictedShift), student };\n    });\n    const leastConflictedStudent = conflictsOfStudents.sort((a, b) => a.conflicts - b.conflicts)[0];\n    console.log(leastConflictedStudent);\n    return leastConflictedStudent.student;\n}\nfunction getConflicts(student, shift) {\n    // 3 pts if unavailable for this shift\n    // a point for each shift he has\n    // 2 points for each shift in a row\n    let conflictPts = 0;\n    if (shift.unavailable.includes(student))\n        conflictPts += 3;\n    conflictPts += student.shifts.length;\n    for (let assignedShift of student.shifts) {\n        if (assignedShift === shift)\n            continue;\n        if (assignedShift.isAdjacent(shift))\n            conflictPts += 15;\n    }\n    if (shift.isSpecial) {\n        conflictPts += student.shifts.reduce((sum, studentShift) => studentShift.isSpecial ? sum + 10 : sum, 0);\n    }\n    return conflictPts;\n}\n// function initShifts(): IOrganizedShiftDay[] {\n//   class OrginizedShiftDay implements IOrganizedShiftDay {\n//     private morning: IShift;\n//     private noon: IShift;\n//     private evening: IShift;\n//     constructor(morning: IShift, noon: IShift, evening: IShift) {\n//       this.morning = morning;\n//       this.noon = noon;\n//       this.evening = evening;\n//     }\n//     getMorning(): IShift {\n//       return this.morning;\n//     }\n//     getNoon(): IShift {\n//       return this.noon;\n//     }\n//     getEvening(): IShift {\n//       return this.evening;\n//     }\n//     getAllShifts(): IShift[] {\n//       return [this.morning, this.noon, this.evening];\n//     }\n//   }\n//   // return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//   // return {\n//   // getMorning: () => new Shift(day, \"morning\"),\n//   //\n//   // morning: new Shift(day, \"morning\"),\n//   // noon: new Shift(day, \"noon\"),\n//   // evening: new Shift(day, \"evening\"),\n//   // getShiftIterator: () => [],\n//   // };\n//   // });\n//   // }\n//   return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//     return new OrginizedShiftDay(\n//       new Shift(day, \"morning\"),\n//       new Shift(day, \"noon\"),\n//       new Shift(day, \"evening\")\n//     );\n//   });\n// }\n// const names: string[] = [\n//   \"Nitzan\",\n//   \"Nadav\",\n//   \"Asaf\",\n//   \"Shimon\",\n//   \"Anna\",\n//   \"Idan\",\n//   \"Danel\",\n//   \"Lahav\",\n//   \"Sean\",\n//   \"Omri\",\n// ];\n// const getRandomDay: () => number = () => Math.floor(Math.random() * 7);\n// const getShift: () => string = () =>\n//   [\"morning\", \"noon\", \"evening\"][Math.floor(Math.random() * 3)];\n// const getAvailable: () => boolean = () =>\n//   Boolean(Math.floor(Math.random() * 2));\n// const students: IStudent[] = names.map((name: string) => {\n//   const newStudent: IStudent = new Student(name);\n//   const pref: IPreference = new Preference(\n//     newStudent,\n//     { day: getRandomDay(), time: getShift() },\n//     getAvailable()\n//   );\n//   newStudent.addPreference(pref);\n//   return newStudent;\n// });\n// const sm = new ShiftManager();\n// console.log(sm.organize(students, 3).forEach((day) => console.log(day)));\n// students.forEach((student) => student.printPreferences());\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js",["42"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hourInMS = 100 * 60 * 60;\nexports.dayInMS = 24 * exports.hourInMS;\nexports.weekInMs = 7 * exports.dayInMS;\nexports.shiftInMS = 8 * exports.hourInMS;\n",{"ruleId":"43","severity":1,"message":"44","line":31,"column":7,"nodeType":"45","messageId":"46","endLine":31,"endColumn":27},{"ruleId":"43","severity":1,"message":"47","line":48,"column":23,"nodeType":"45","messageId":"46","endLine":48,"endColumn":36},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":1,"nodeType":"54","messageId":"55","endLine":1,"endColumn":14,"fix":"56"},{"ruleId":"57","severity":1,"message":"58","line":45,"column":51,"nodeType":"59","messageId":"60","endLine":45,"endColumn":53},{"ruleId":"61","severity":1,"message":"62","line":61,"column":13,"nodeType":"63","messageId":"64","endLine":61,"endColumn":70},{"ruleId":"65","severity":1,"message":"66","line":98,"column":9,"nodeType":"67","messageId":"68","endLine":105,"endColumn":10},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":1,"nodeType":"54","messageId":"55","endLine":1,"endColumn":14,"fix":"69"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":1,"nodeType":"54","messageId":"55","endLine":1,"endColumn":14,"fix":"70"},"@typescript-eslint/no-unused-vars","'students' is assigned a value but never used.","Identifier","unusedVar","'setShiftState' is assigned a value but never used.","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"73","text":"74"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"75","text":"74"},{"range":"76","text":"74"},"no-global-assign","no-unsafe-negation",[0,13],"",[0,13],[0,13]]