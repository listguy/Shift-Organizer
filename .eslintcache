[{"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx":"1","/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx":"2","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx":"3","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js":"4","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js":"5","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js":"6","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx":"7","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx":"8"},{"size":506,"mtime":1608938157274,"results":"9","hashOfConfig":"10"},{"size":4170,"mtime":1609067365538,"results":"11","hashOfConfig":"10"},{"size":1368,"mtime":1608935661559,"results":"12","hashOfConfig":"10"},{"size":4588,"mtime":1609066292734,"results":"13","hashOfConfig":"10"},{"size":13833,"mtime":1609067726083,"results":"14","hashOfConfig":"10"},{"size":235,"mtime":1609066292722,"results":"15","hashOfConfig":"10"},{"size":998,"mtime":1608977594268,"results":"16","hashOfConfig":"10"},{"size":1863,"mtime":1609068890028,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1bwibib",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx",[],["42","43"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx",["44","45","46"],"import WeekTable from \"./components/WeekTable\";\nimport { Preference, Student } from \"./shift_organizer_modules/utils/Entities\";\nimport {\n  dayInMS,\n  IOrganizedShiftDay,\n  IPreference,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"./shift_organizer_modules/utils/interface\";\nimport ShiftManager from \"./shift_organizer_modules/shiftOrginazor\";\nimport { useEffect, useState } from \"react\";\nimport AddStudent from \"./components/AddStudent\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport StudentsDeatails from \"./components/StudentTicket\";\n\nconst names: string[] = [\n  \"Nitzan\",\n  \"Nadav\",\n  \"Asaf\",\n  \"Shimon\",\n  \"Anna\",\n  \"Idan\",\n  \"Danel\",\n  \"Lahav\",\n  \"Sean\",\n  \"Omri\",\n];\nconst getRandomDay: () => number = () => Math.floor(Math.random() * 7) + 1;\nconst getRandomWeek: () => number = () => Math.floor(Math.random() * 0) + 1;\nconst getShift: () => number = () => [0, 1, 2][Math.floor(Math.random() * 3)];\nconst getAvailable: () => boolean = () =>\n  Boolean(Math.floor(Math.random() * 2));\n\nconst SM = new ShiftManager();\n\n// const students: IStudent[] =\nnames.map((name: string) => {\n  const newStudent: IStudent = SM.addStudent(name)!;\n  const pref: IPreference = new Preference(\n    newStudent,\n    getRandomWeek() * weekInMs +\n      getRandomDay() * dayInMS +\n      getShift() * shiftInMS,\n    getAvailable()\n  );\n  newStudent.addPreference(pref);\n});\n\nfunction App() {\n  const [students, setStudents] = useState<IStudent[]>(SM.getAllStudents());\n  const [shiftsState, setShiftState] = useState<IOrganizedShiftDay[][]>(\n    SM.getAllShifts()\n  );\n\n  // Adds a new student to the shift Manager\n  const addStudent: (name: string, sm?: IShiftManager) => IStudent | boolean = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      const newStudent: IStudent = sm.addStudent(name)!;\n      setStudents(sm.getAllStudents());\n      return newStudent;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const addPreferenceToStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | string = (\n    studentName: string,\n    shiftTimeStamp: number,\n    available: boolean = true,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.addPreferenceToStudent(studentName, available, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const organizeShifts: () => void = () => {\n    if (students.length < 7) {\n      Swal.fire({\n        title: \"Hey!\",\n        text: `Only ${students.length} ${\n          students.length > 1 ? \"students are\" : \"student is\"\n        } saved in the system. Procceed?`,\n        showDenyButton: true,\n        confirmButtonText: \"Yes\",\n        denyButtonText: \"No\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          SM.organize();\n          setShiftState(SM.getAllShifts());\n        }\n      });\n    } else {\n      SM.organize();\n      setShiftState(SM.getAllShifts());\n    }\n  };\n\n  // useEffect(() => {\n  //   addStudent(\"Nitzan\");\n  // }, []);\n\n  return (\n    <>\n      <AddStudent addFunction={addStudent} />\n      <button onClick={organizeShifts}>Organize!</button>\n      <h1 style={{ textAlign: \"center\" }}>This week's shifts</h1>\n      {/* <h2>Available Students</h2>\n      <div>\n        {students.map((student: IStudent) => (\n          <li> {student.name}</li>\n        ))}\n      </div> */}\n      <StudentsDeatails students={students} addPref={addPreferenceToStudent} />\n      Week 1\n      <WeekTable shifts={shiftsState[0]} />\n      Week 2\n      <WeekTable shifts={shiftsState[1]} />\n      Week 3\n      <WeekTable shifts={shiftsState[2]} />\n      Week 4\n      <WeekTable shifts={shiftsState[3]} />\n      {/* <h2>Students Preferences</h2>\n      {students.map((student: IStudent) => (\n        <li>\n          <b>{student.name}</b>,{\" \"}\n          {student?.preferences.map(\n            (pref: IPreference) =>\n              `${pref.shift.day}-${pref.shift.time} ${\n                pref.available ? \"available\" : \"unavailable\"\n              }`\n          )}\n        </li>\n      ))} */}\n    </>\n  );\n}\n\nexport default App;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx",[],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js",["47","48","49"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./interface\");\nclass Shift {\n    constructor(day, week, time, special = false) {\n        this.unavailable = [];\n        this.day = day;\n        this.week = week;\n        this.time = time;\n        this.isSpecial = special;\n        this.timeStamp =\n            week * interface_1.weekInMs +\n                day * interface_1.dayInMS +\n                interface_1.shiftInMS * (time === \"morning\" ? 0 : time === \"noon\" ? 1 : 2);\n    }\n    assignStudent(student) {\n        this.chosen = student;\n    }\n    addUnavailable(student) {\n        this.unavailable.push(student);\n    }\n    isStudentUnavailable(student) {\n        return this.unavailable.includes(student);\n    }\n    printUnavailable() {\n        const formated = this.unavailable.map((student) => student.name);\n        console.log(formated);\n    }\n    isAdjacent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return (otherShift.timeStamp === this.timeStamp - interface_1.shiftInMS ||\n            otherShift.timeStamp === this.timeStamp + interface_1.shiftInMS);\n    }\n    hasSameStudent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return otherShift.chosen === this.chosen;\n    }\n}\nexports.Shift = Shift;\nclass Student {\n    constructor(name) {\n        this.shifts = [];\n        this.preferences = [];\n        this.name = name;\n    }\n    addShift(shift) {\n        this.shifts.push(shift);\n    }\n    removeShift(shift) {\n        this.shifts = this.shifts.filter((s) => s != shift);\n    }\n    printShifts() {\n        const formated = this.shifts.map((shift) => {\n            return { day: shift.day, time: shift.time };\n        });\n        console.log(formated);\n    }\n    addPreference(preference) {\n        if (preference instanceof Preference === false)\n            throw new Error(`Expected an object of type Preferene but got ${typeof preference} instead`);\n        if (this.preferences.find((pref) => pref.shiftTimeStamp === preference.shiftTimeStamp)) {\n            throw new Error(`Preference already exists for this student`);\n        }\n        this.preferences.push(preference);\n        return true;\n    }\n    removePreference(shiftToRemoveTimestamp) {\n        const prefIndex = this.preferences.findIndex((pref) => pref.shiftTimeStamp === shiftToRemoveTimestamp);\n        if (!prefIndex) {\n            throw new Error(\"Student does not have a preference for this shift\");\n        }\n        this.preferences.splice(prefIndex, 1);\n    }\n    getPreferences() {\n        return this.preferences.slice();\n    }\n    printPreferences() {\n        this.preferences.map((preference) => console.log(preference));\n    }\n}\nexports.Student = Student;\nclass Preference {\n    constructor(student, shiftTimeStamp, available) {\n        this.student = student;\n        this.shiftTimeStamp = shiftTimeStamp;\n        this.available = available;\n        this.handled = false;\n    }\n    getPrettyTime() {\n        const week = Math.floor(this.shiftTimeStamp / interface_1.weekInMs);\n        const day = Math.floor((this.shiftTimeStamp - interface_1.weekInMs * week) / interface_1.dayInMS);\n        const shiftIndex = Math.floor((this.shiftTimeStamp - week * interface_1.weekInMs - day * interface_1.dayInMS) / interface_1.shiftInMS);\n        const time = shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n        return { week, day, time };\n    }\n}\nexports.Preference = Preference;\nclass OrginizedShiftDay {\n    constructor(morning, noon, evening, ...arr) {\n        this.morning = morning || arr[0];\n        this.noon = noon || arr[1];\n        this.evening = evening || arr[2];\n    }\n    getMorning() {\n        return this.morning;\n    }\n    getNoon() {\n        return this.noon;\n    }\n    getEvening() {\n        return this.evening;\n    }\n    getAllShifts() {\n        return [this.morning, this.noon, this.evening];\n    }\n    getShiftByTime(time) {\n        switch (time) {\n            case \"morning\":\n                return this.morning;\n            case \"noon\":\n                return this.noon;\n            case \"evening\":\n                return this.evening;\n        }\n        console.log(\"Time is ilegal. Should be one of morning, noon, evening\");\n    }\n}\nexports.OrginizedShiftDay = OrginizedShiftDay;\n// let s1 = new Shift(1, \"a\");\n// let s2 = new Shift(2, \"b\");\n// s1.addUnavailable(new Student(\"bob\"));\n// s2.addUnavailable(new Student(\"mo\"));\n// console.log(s1.unavailable);\n// console.log(s2.unavailable);\n",["50","51"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js",["52","53"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./utils/interface\");\nconst lodash_1 = require(\"lodash\");\nconst Entities_1 = require(\"./utils/Entities\");\nclass ShiftManager {\n    constructor() {\n        this.students = [];\n        this.shifts = [];\n        this.initShifts();\n        this.HeuristicTreshold = 0;\n    }\n    addStudent(name) {\n        const exist = this.students.findIndex((student) => student.name === name) !==\n            -1;\n        if (exist) {\n            throw new Error(\"Student already exist\");\n        }\n        const newStudent = new Entities_1.Student(name);\n        this.students.push(newStudent);\n        this.HeuristicTreshold = calculateTreshold(this.students.length, this.shifts.length * 7);\n        return newStudent;\n    }\n    removeStudent(name) {\n        const indexOfStudent = this.students.findIndex((student) => student.name === name);\n        if (indexOfStudent === -1) {\n            throw new Error(\"Student does not exist\");\n        }\n        this.students.splice(indexOfStudent, 1);\n        this.HeuristicTreshold = calculateTreshold(this.students.length, this.shifts.length * 7);\n    }\n    getStudent(name) {\n        return this.students.find((student) => student.name === name);\n    }\n    getAllStudents() {\n        return this.students.slice();\n    }\n    addPreferenceToStudent(name, available, shiftTimestamp) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        if (shiftTimestamp < 0 ||\n            shiftTimestamp > 4 * interface_1.weekInMs ||\n            shiftTimestamp % interface_1.shiftInMS !== 0) {\n            throw new Error(`Timestamp is ilegal. Check it is positive, not larger than ${4 * interface_1.weekInMs} and points to the begining of the shift`);\n        }\n        const newPref = new Entities_1.Preference(student, shiftTimestamp, available);\n        try {\n            student.addPreference(newPref);\n            return true;\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n    removePreferenceFromStudent(name, shiftToRemoveTimestamp) {\n        const student = this.students.find((student) => student.name === name);\n        if (!student) {\n            throw new Error(\"Student does not exist\");\n        }\n        if (shiftToRemoveTimestamp < 0 ||\n            shiftToRemoveTimestamp > 4 * interface_1.weekInMs ||\n            shiftToRemoveTimestamp % interface_1.shiftInMS !== 0) {\n            throw new Error(`Timestamp is ilegal. Check it is positive, not larger than ${4 * interface_1.weekInMs} and points to the begining of the shift`);\n        }\n        try {\n            student.removePreference(shiftToRemoveTimestamp);\n            return true;\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n    getShift(week, day, time) {\n        // return this.shifts.find(\n        //   (shift: IShift) => shift.day === day && shift.time === time\n        // );\n        if (!this.shifts[week - 1])\n            return undefined;\n        return this.shifts[week - 1][day - 1]?.getShiftByTime(time);\n    }\n    getShiftByStamp(stamp) {\n        const week = Math.floor(stamp / interface_1.weekInMs);\n        const day = Math.floor((stamp - interface_1.weekInMs * week) / interface_1.dayInMS);\n        const shiftIndex = Math.floor((stamp - week * interface_1.weekInMs - day * interface_1.dayInMS) / interface_1.shiftInMS);\n        const time = shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n        return this.getShift(week + 1, day + 1, time);\n    }\n    getAllShifts() {\n        return this.shifts.slice();\n    }\n    assignStudentToShift(student, shift) {\n        shift.assignStudent(student);\n    }\n    organize() {\n        const shifts = this.shifts;\n        const students = this.students;\n        const availablePreferences = [];\n        const unavailablePreferences = [];\n        // will help to keep track of the students number of shifts\n        // const numberOfShiftsOfStudent: { name: string; counter: number }[] = students.map(\n        //   (student: IStudent) => {\n        //     return { name: student.name, counter: 0 };\n        //   }\n        // );\n        const numberOfShiftsOfStudent = students.reduce((prev, student) => {\n            //TODO fix this\n            //@ts-ignore\n            prev[student.name] = 0;\n            return prev;\n        }, {});\n        students.forEach((student) => student.preferences.forEach((preference) => {\n            if (preference.available) {\n                availablePreferences.push(preference);\n            }\n            else {\n                unavailablePreferences.push(preference);\n            }\n        }));\n        //first, assign all available preferences\n        availablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.getPrettyTime();\n            const desiredShift = shifts[week][day].getShiftByTime(time);\n            if (desiredShift.chosen)\n                return;\n            desiredShift.assignStudent(pref.student);\n            pref.handled = true;\n            //TODO fix this\n            //@ts-ignore\n            numberOfShiftsOfStudent[pref.student] += 1;\n        });\n        // assign all unavailable preferences\n        unavailablePreferences.forEach((pref) => {\n            const { week, day, time, } = pref.getPrettyTime();\n            const undesiredShift = shifts[week][day].getShiftByTime(time);\n            undesiredShift.addUnavailable(pref.student);\n            pref.handled = true;\n        });\n        // assign all other students to shifts\n        const organizedShifts = minConflicts(shifts, students, 1000, this.HeuristicTreshold, this);\n        this.shifts = organizedShifts;\n        console.log(this.HeuristicTreshold);\n        return organizedShifts;\n    }\n    initShifts() {\n        this.shifts = [0, 1, 2, 3].map((week) => [0, 1, 2, 3, 4, 5, 6].map((day) => {\n            return day >= 5\n                ? new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\", true), new Entities_1.Shift(day, week, \"noon\", true), new Entities_1.Shift(day, week, \"evening\", true))\n                : new Entities_1.OrginizedShiftDay(new Entities_1.Shift(day, week, \"morning\"), new Entities_1.Shift(day, week, \"noon\"), new Entities_1.Shift(day, week, \"evening\"));\n        }));\n    }\n    cloneShifts() {\n        // created a copy for min conflicts to work on and modify.\n        return this.shifts.map((shiftsWeek) => shiftsWeek.map((shiftsDay) => new Entities_1.OrginizedShiftDay(undefined, undefined, undefined, ...shiftsDay\n            .getAllShifts()\n            .map((shift) => new Entities_1.Shift(shift.day, shift.week, shift.time, shift.isSpecial)))));\n    }\n    cloneStudents() {\n        return this.students.map((student) => {\n            const copyStudent = new Entities_1.Student(student.name);\n            return copyStudent;\n        });\n    }\n}\nexports.default = ShiftManager;\n//Min conflicts Algo pseudo code\n/*function MinConflicts(csp:any, max_steps:number) {\n  //csp:\n  //max_steps: number of steps before giving up\n\n  current = initial assigment for csp\n  for i=1 to max_steps do\n    if current is a solution for csp\n      return current\n    const randomVar = randomly chosen conflicted variable in csp\n    const value = the value for randomVar that minimizes conflicts\n    set var = value in current\n  \n\n  return failure\n} */\nfunction minConflicts(csp, students, maxSteps, treshold, SM) {\n    let current = csp;\n    for (let i = 1; i < maxSteps; i++) {\n        console.log(i);\n        if (shiftsAreOrganized(current, treshold, SM))\n            return current;\n        let randomConflict = getRandomConflict(csp, treshold);\n        let value = minimizeConflictsIn(randomConflict, students);\n        if (randomConflict.chosen) {\n            randomConflict.chosen.removeShift(randomConflict);\n        }\n        randomConflict.assignStudent(value);\n        value.addShift(randomConflict);\n    }\n    return current;\n}\nfunction shiftsAreOrganized(currentState, treshold, SM) {\n    // checks if current shifts in state are fine organized:\n    let legal = true;\n    for (let shiftWeek of currentState) {\n        for (let shiftDay of shiftWeek) {\n            for (let curShift of shiftDay.getAllShifts()) {\n                if (!curShift.chosen) {\n                    legal = false;\n                    break;\n                }\n                const nextShift = SM.getShiftByStamp(curShift.timeStamp + interface_1.shiftInMS);\n                const prevShift = SM.getShiftByStamp(curShift.timeStamp - interface_1.shiftInMS);\n                if (curShift.hasSameStudent(nextShift) ||\n                    curShift.hasSameStudent(prevShift)) {\n                    legal = false;\n                    break;\n                }\n            }\n        }\n    }\n    return legal;\n}\nfunction getRandomConflict(csp, treshold) {\n    // get a random unassigned shift\n    let availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift) => !shift.chosen);\n    if (!availableShifts.length) {\n        availableShifts = lodash_1.flatMapDepth(csp, (shiftWeek) => shiftWeek.map((shiftDay) => shiftDay.getAllShifts()), 2).filter((shift, index, shiftsArr) => shift.hasSameStudent(shiftsArr[index + 1]) ||\n            shift.hasSameStudent(shiftsArr[index - 1]));\n    }\n    if (availableShifts.length === 0) {\n        console.log(\"Should have quit!\");\n    }\n    return availableShifts[Math.floor(Math.random() * availableShifts.length)];\n}\nfunction minimizeConflictsIn(conflictedShift, students) {\n    // assign a student that will minimize the conflicts\n    const conflictsOfStudents = students.map((student) => {\n        return { conflicts: getConflictsWith(student, conflictedShift), student };\n    });\n    const leastConflictedStudent = conflictsOfStudents.sort((a, b) => a.conflicts - b.conflicts)[0];\n    console.log(leastConflictedStudent);\n    return leastConflictedStudent.student;\n}\nfunction getConflictsWith(student, shift) {\n    if (!shift) {\n        console.log(\"Whatttttttttttttttttttttttttt\");\n        return 100;\n    }\n    // sum of shift count between the student's shifts\n    if (student.shifts.length <= 1) {\n        return shift.isAdjacent(student.shifts[0]) ? 1 : 0;\n    }\n    const distanceBetweenShifts = student.shifts\n        .map((shift) => shift.timeStamp)\n        .concat(shift.timeStamp)\n        .sort((a, b) => a - b)\n        .reduce((sum, curShiftTime, index, shiftsArr) => {\n        // console.log(shiftsArr);\n        if (index === shiftsArr.length - 1)\n            return sum;\n        return sum + (shiftsArr[index + 1] - curShiftTime) / interface_1.shiftInMS;\n    }, 0);\n    return 1 / (distanceBetweenShifts / student.shifts.length);\n}\nfunction evaluateCurrentShiftsOf(student) {\n    if (student.shifts.length <= 1)\n        return 1;\n    return (1 /\n        student.shifts\n            .map((shift) => shift.timeStamp)\n            .sort((a, b) => a - b)\n            .reduce((sum, curShiftTime, index, shiftsArr) => {\n            // console.log(shiftsArr);\n            if (index === shiftsArr.length - 1)\n                return sum;\n            return sum + (shiftsArr[index + 1] - curShiftTime) / interface_1.shiftInMS;\n        }, 0));\n}\nfunction calculateTreshold(sumStudents, sumShifts) {\n    // return (\n    //   1 /\n    //   ((sumStudents * (Math.floor(sumShifts / sumStudents) - 1)) /\n    //     (Math.floor(sumShifts / sumStudents) + 1))\n    // );\n    return 1 / (sumStudents - 1);\n}\n//#region nothing to see here ...\n// function initShifts(): IOrganizedShiftDay[] {\n//   class OrginizedShiftDay implements IOrganizedShiftDay {\n//     private morning: IShift;\n//     private noon: IShift;\n//     private evening: IShift;\n//     constructor(morning: IShift, noon: IShift, evening: IShift) {\n//       this.morning = morning;\n//       this.noon = noon;\n//       this.evening = evening;\n//     }\n//     getMorning(): IShift {\n//       return this.morning;\n//     }\n//     getNoon(): IShift {\n//       return this.noon;\n//     }\n//     getEvening(): IShift {\n//       return this.evening;\n//     }\n//     getAllShifts(): IShift[] {\n//       return [this.morning, this.noon, this.evening];\n//     }\n//   }\n//   // return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//   // return {\n//   // getMorning: () => new Shift(day, \"morning\"),\n//   //\n//   // morning: new Shift(day, \"morning\"),\n//   // noon: new Shift(day, \"noon\"),\n//   // evening: new Shift(day, \"evening\"),\n//   // getShiftIterator: () => [],\n//   // };\n//   // });\n//   // }\n//   return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\n//     return new OrginizedShiftDay(\n//       new Shift(day, \"morning\"),\n//       new Shift(day, \"noon\"),\n//       new Shift(day, \"evening\")\n//     );\n//   });\n// }\n// const names: string[] = [\n//   \"Nitzan\",\n//   \"Nadav\",\n//   \"Asaf\",\n//   \"Shimon\",\n//   \"Anna\",\n//   \"Idan\",\n//   \"Danel\",\n//   \"Lahav\",\n//   \"Sean\",\n//   \"Omri\",\n// ];\n// const getRandomDay: () => number = () => Math.floor(Math.random() * 7);\n// const getShift: () => string = () =>\n//   [\"morning\", \"noon\", \"evening\"][Math.floor(Math.random() * 3)];\n// const getAvailable: () => boolean = () =>\n//   Boolean(Math.floor(Math.random() * 2));\n// const students: IStudent[] = names.map((name: string) => {\n//   const newStudent: IStudent = new Student(name);\n//   const pref: IPreference = new Preference(\n//     newStudent,\n//     { day: getRandomDay(), time: getShift() },\n//     getAvailable()\n//   );\n//   newStudent.addPreference(pref);\n//   return newStudent;\n// });\n// const sm = new ShiftManager();\n// console.log(sm.organize(students, 3).forEach((day) => console.log(day)));\n// students.forEach((student) => student.printPreferences());\n//#endregion\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js",["54"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hourInMS = 1000 * 60 * 60;\nexports.dayInMS = 24 * exports.hourInMS;\nexports.weekInMs = 7 * exports.dayInMS;\nexports.shiftInMS = 8 * exports.hourInMS;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx",["55"],"import React, { useCallback } from \"react\";\nimport Swal from \"sweetalert2\";\nimport {\n  IShiftManager,\n  IStudent,\n} from \"../shift_organizer_modules/utils/interface\";\n\nexport default function AddStudent({\n  addFunction,\n}: {\n  addFunction: (name: string, sm?: IShiftManager) => IStudent | boolean;\n}) {\n  const promptModal = useCallback(async () => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter New Student's Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | IStudent = addFunction(name);\n      if (sucess) {\n        Swal.fire(\"Woohoo!\", `Student ${name} added!`, \"success\");\n      } else {\n        Swal.fire(\"Oops..\", `Student ${name} alredy exists!`, \"error\");\n      }\n    }\n  }, []);\n\n  return <button onClick={promptModal}>Add student</button>;\n}\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx",["56"],"import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport {\n  IPreference,\n  IShiftManager,\n  IStudent,\n} from \"../shift_organizer_modules/utils/interface\";\n\nexport default function StudentsDeatails({\n  students,\n  addPref,\n}: {\n  students: IStudent[];\n  addPref: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | string;\n}) {\n  const promptModal = useCallback(async (studentName: string) => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter Preference Details\",\n      html: '<input id=\"pref-time\" class=\"swal-input\">',\n      showCancelButton: true,\n    });\n\n    // if (name) {\n    //   const sucess: boolean | IStudent = addPref(studentName);\n    //   if (sucess) {\n    //     Swal.fire(\"Woohoo!\", `Student ${name} added!`, \"success\");\n    //   } else {\n    //     Swal.fire(\"Oops..\", `Student ${name} alredy exists!`, \"error\");\n    //   }\n    // }\n    Swal.fire(studentName);\n  }, []);\n\n  return (\n    <Wrapper>\n      {students.map((student: IStudent) => (\n        <Ticket key={`student-${student.name}`}>\n          <b>{student.name}</b>\n          {student.preferences.map((pref: IPreference, i: number) => (\n            <li key={`pref-${student.name}-${i}`}>\n              {`${pref.getPrettyTime().week}-${pref.getPrettyTime().day}-${\n                pref.getPrettyTime().time\n              } ${pref.available ? \"available\" : \"unavailable\"}`}\n            </li>\n          ))}\n          <button onClick={() => promptModal(student.name)}>Add Pref</button>\n        </Ticket>\n      ))}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: grid;\n  background-color: red;\n  grid-template-columns: repeat(5, 1fr);\n  width: 80%;\n`;\n\nconst Ticket = styled.div`\n  background-color: yellow;\n  margin: 10px;\n`;\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":22,"nodeType":"63","messageId":"64","endLine":2,"endColumn":29},{"ruleId":"61","severity":1,"message":"65","line":13,"column":10,"nodeType":"63","messageId":"64","endLine":13,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":39,"column":26,"nodeType":"68","messageId":"69","endLine":39,"endColumn":28},{"ruleId":"70","severity":1,"message":"71","line":1,"column":1,"nodeType":"72","messageId":"73","endLine":1,"endColumn":14,"fix":"74"},{"ruleId":"75","severity":1,"message":"76","line":52,"column":51,"nodeType":"77","messageId":"78","endLine":52,"endColumn":53},{"ruleId":"79","severity":1,"message":"80","line":119,"column":9,"nodeType":"81","messageId":"82","endLine":126,"endColumn":10},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":1,"nodeType":"72","messageId":"73","endLine":1,"endColumn":14,"fix":"83"},{"ruleId":"84","severity":1,"message":"85","line":263,"column":10,"nodeType":"63","messageId":"64","endLine":263,"endColumn":33},{"ruleId":"70","severity":1,"message":"71","line":1,"column":1,"nodeType":"72","messageId":"73","endLine":1,"endColumn":14,"fix":"86"},{"ruleId":"87","severity":1,"message":"88","line":33,"column":6,"nodeType":"89","endLine":33,"endColumn":8,"suggestions":"90"},{"ruleId":"61","severity":1,"message":"91","line":23,"column":20,"nodeType":"63","messageId":"64","endLine":23,"endColumn":24},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'Student' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"94","text":"95"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"96","text":"95"},"no-unused-vars","'evaluateCurrentShiftsOf' is defined but never used.",{"range":"97","text":"95"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'addFunction'. Either include it or remove the dependency array. If 'addFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["98"],"'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[0,13],"",[0,13],[0,13],{"desc":"99","fix":"100"},"Update the dependencies array to be: [addFunction]",{"range":"101","text":"102"},[929,931],"[addFunction]"]