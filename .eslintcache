[{"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx":"1","/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx":"2","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx":"3","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js":"4","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js":"5","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js":"6","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx":"7","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx":"8","/home/nitzan/Documents/side-projects/Shift Organizer/src/reportWebVitals.ts":"9","/home/nitzan/Documents/side-projects/Shift Organizer/src/serviceWorkerRegistration.ts":"10"},{"size":612,"mtime":1609370477573,"results":"11","hashOfConfig":"12"},{"size":8116,"mtime":1609368709313,"results":"13","hashOfConfig":"12"},{"size":2714,"mtime":1609268201312,"results":"14","hashOfConfig":"12"},{"size":6281,"mtime":1609370162066,"results":"15","hashOfConfig":"12"},{"size":15855,"mtime":1609370178854,"results":"16","hashOfConfig":"12"},{"size":235,"mtime":1609370019456,"results":"17","hashOfConfig":"12"},{"size":992,"mtime":1609233281468,"results":"18","hashOfConfig":"12"},{"size":8020,"mtime":1609369264754,"results":"19","hashOfConfig":"12"},{"size":425,"mtime":1609369845597,"results":"20","hashOfConfig":"12"},{"size":5256,"mtime":1609369854405,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bwibib",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nitzan/Documents/side-projects/Shift Organizer/src/index.tsx",[],"/home/nitzan/Documents/side-projects/Shift Organizer/src/App.tsx",["48","49","50","51"],"import WeekTable from \"./components/WeekTable\";\nimport { Preference } from \"./shift_organizer_modules/utils/Entities\";\nimport {\n  dayInMS,\n  IOrganizedShiftDay,\n  IPreference,\n  IShift,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"./shift_organizer_modules/utils/interface\";\nimport ShiftManager from \"./shift_organizer_modules/shiftOrginazor\";\nimport { useState } from \"react\";\nimport AddStudent from \"./components/AddStudent\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport StudentsDeatails from \"./components/StudentTicket\";\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\nimport { IoCalendarOutline } from \"react-icons/io5\";\nimport { IoIosWarning } from \"react-icons/io\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nconst names: string[] = [\n  \"Nitzan\",\n  \"Nadav\",\n  \"Asaf\",\n  \"Shimon\",\n  \"Anna\",\n  \"Lahav\",\n  \"Idan\",\n  // \"Danel\",\n  // \"Sean\",\n  // \"Omri\",\n];\n\nconst mockPreferences: any = [\n  { week: 0, day: 0, shift: 0, available: true },\n  { week: 0, day: 0, shift: 0, available: true },\n  { week: 0, day: 3, shift: 1, available: false },\n  { week: 0, day: 6, shift: 2, available: false },\n  { week: 0, day: 2, shift: 0, available: true },\n  { week: 0, day: 4, shift: 2, available: false },\n  { week: 0, day: 5, shift: 1, available: false },\n];\nconst getRandomDay: () => number = () => Math.floor(Math.random() * 7) + 1;\nconst getRandomWeek: () => number = () => Math.floor(Math.random() * 0) + 1;\nconst getShift: () => number = () => Math.floor(Math.random() * 3);\nconst getAvailable: () => boolean = () =>\n  Boolean(Math.floor(Math.random() * 2));\n\nconst SM = new ShiftManager();\n\nnames.forEach((name: string, i: number) => {\n  const newStudent: IStudent = SM.addStudent(name)!;\n  const mockPref: any = mockPreferences[i];\n  const pref: IPreference = new Preference(\n    newStudent,\n    mockPref.week * weekInMs +\n      mockPref.day * dayInMS +\n      mockPref.shift * shiftInMS,\n    mockPref.available\n  );\n  newStudent.addPreference(pref);\n});\n\nfunction App() {\n  const [students, setStudents] = useState<IStudent[]>(SM.getAllStudents());\n  const [shiftsState, setShiftState] = useState<IOrganizedShiftDay[][]>(\n    SM.getAllShifts()\n  );\n  const [displayedWeek, setDisplayedWeek] = useState<number>(0);\n\n  // Adds a new student to the shift Manager\n  const addStudent: (name: string, sm?: IShiftManager) => IStudent | boolean = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      const newStudent: IStudent = sm.addStudent(name)!;\n      setStudents(sm.getAllStudents());\n      return newStudent;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  const removeStudent: (name: string, sm?: IShiftManager) => boolean | Error = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removeStudent(name);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  };\n\n  const addPreferenceToStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    available: boolean = true,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.addPreferenceToStudent(studentName, available, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const removePreferenceFromStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removePreferenceFromStudent(studentName, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const replaceStudent: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shift: IShift,\n    sm: IShiftManager = SM\n  ) => {\n    const studentToAssign: IStudent | undefined = sm.getStudent(studentName);\n    if (!studentToAssign) return false;\n\n    sm.assignStudentToShift(studentToAssign, shift);\n\n    setStudents(sm.getAllStudents());\n    return true;\n  };\n\n  const organizeShifts: () => void = () => {\n    if (students.length < 1) {\n      Swal.fire(\n        \"Sorry\",\n        \"You need to have at least one student to organize shifts\",\n        \"info\"\n      );\n      return;\n    }\n    if (students.length < 7) {\n      Swal.fire({\n        title: \"Hey!\",\n        text: `Only ${students.length} ${\n          students.length > 1 ? \"students are\" : \"student is\"\n        } saved in the system. Procceed?`,\n        showDenyButton: true,\n        confirmButtonText: \"Yes\",\n        denyButtonText: \"No\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          SM.organize();\n          setShiftState(SM.getAllShifts());\n        }\n      });\n    } else {\n      SM.organize();\n      setShiftState(SM.getAllShifts());\n    }\n  };\n\n  const handleLeft: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev - 1));\n\n  const handleRight: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev + 1));\n\n  const warnings: string[] = SM.getWarnings();\n\n  return (\n    <>\n      <WarningMsgContainer>\n        {warnings.map((msg: string) => (\n          <WarningMessage>\n            <IoIosWarning style={{ margin: \"0 10px\", fontSize: \"1.2em\" }} />\n            {msg}\n          </WarningMessage>\n        ))}\n      </WarningMsgContainer>\n      <MainTitle>\n        Shift Organizer <IoCalendarOutline style={{ marginLeft: \"1vw\" }} />\n      </MainTitle>\n      <MainButtonsRow>\n        <AddStudent addFunction={addStudent} />\n        <div onClick={organizeShifts}>Organize!</div>\n      </MainButtonsRow>\n      <StudentsDeatails\n        students={students}\n        addPref={addPreferenceToStudent}\n        rmvPref={removePreferenceFromStudent}\n        rmvStudent={removeStudent}\n      />\n      <ButtonsRow>\n        <ArrowButton opdir={false} onClick={handleLeft}>\n          <FaCaretLeft />\n        </ArrowButton>\n        <span>Week {displayedWeek + 1}</span>\n        <ArrowButton opdir={true} onClick={handleRight}>\n          <FaCaretRight />\n        </ArrowButton>\n      </ButtonsRow>\n      <WeekTable\n        shifts={shiftsState[displayedWeek]}\n        replaceFunc={replaceStudent}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n//helpers\nfunction clamp(max: number, min: number, value: number): number {\n  return Math.max(min, Math.min(max, value));\n}\nconst MainTitle = styled.h1`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 3.8em;\n  margin-bottom: 3vh;\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 2vh;\n  span {\n    font-size: 2em;\n    height: 100%;\n  }\n`;\n\nconst MainButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1.5vh;\n  div {\n    background-color: wheat;\n    color: rgb(149, 7, 38);\n    font-weight: bold;\n    padding: 14px 8px;\n    width: fit-content;\n    font-size: 1.1em;\n    border-radius: 15px;\n    margin: 0 1vw;\n    cursor: pointer;\n    transition: 0.1s ease-in-out;\n  }\n\n  div:hover {\n    transform: translate(0px, -5px);\n    box-shadow: 0px 0px 4px 4px rgba(236, 234, 197, 0.8);\n  }\n`;\n\nconst ArrowButton = styled.div`\n  font-size: 3em;\n  margin: 0 2vw;\n  cursor: pointer;\n  transition: 0.15s ease-in-out;\n\n  :hover {\n    transform: translate(\n      ${(props: { opdir: boolean }) => (props.opdir ? \"5px\" : \"-5px\")},\n      0\n    );\n  }\n`;\n\nconst WarningMsgContainer = styled.div`\n  position: absolute;\n  width: 100vw;\n  top: 0;\n  z-index: 2;\n`;\nconst WarningMessage = styled.div`\n  background-color: rgba(238, 106, 18, 0.65);\n  color: #3d0101;\n  width: 8vw;\n  height: 2vh;\n  margin: 0.5vh;\n  padding: 6px 5px;\n  border-radius: 5px;\n  font-size: 0.9em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  transition: 0.2s ease-in-out;\n\n  :hover {\n    width: fit-content;\n  }\n`;\n",["52","53"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/components/WeekTable.tsx",["54"],"import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport {\n  IOrganizedShiftDay,\n  IShift,\n  IShiftManager,\n} from \"../shift_organizer_modules/utils/interface\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport default function WeekTable({\n  shifts,\n  replaceFunc,\n}: {\n  shifts: IOrganizedShiftDay[];\n  replaceFunc: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error;\n}) {\n  const promptRepModal = useCallback(async (shift: IShift) => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter Student to Assign Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | Error = replaceFunc(name, shift);\n      if (sucess) {\n        Swal.fire(\n          \"Woohoo!\",\n          `Student ${name} was assigned successfuly!`,\n          \"success\"\n        );\n      } else {\n        Swal.fire(\"Oops..\", `can't assign ${name} to this shift :(`, \"error\");\n      }\n    }\n  }, []);\n\n  return (\n    <TableWrapper>\n      {shifts?.map((shiftDay: IOrganizedShiftDay, i: number) => (\n        <TableColumn>\n          <h2>{daysInWeek[i]}</h2>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getMorning())}>\n            <span>Morning</span>\n            {shiftDay?.getMorning()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getNoon())}>\n            <span>Noon</span>\n            {shiftDay?.getNoon()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getEvening())}>\n            <span>Evening</span>\n            {shiftDay?.getEvening()?.chosen?.name}\n          </ShiftDay>\n        </TableColumn>\n      ))}{\" \"}\n    </TableWrapper>\n  );\n}\n\nconst TableWrapper = styled.div`\n  display: flex;\n  width: 90vw;\n  min-height: 40vh;\n  margin: 0 auto;\n`;\n\nconst TableColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 14%;\n  margin: 0 auto;\n  text-align: center;\n\n  h2 {\n    font-size: 2em;\n    text-shadow: 0px 0px 4px #f7f2f2;\n  }\n`;\n\nconst ShiftDay = styled.div`\n  background-color: rgb(149, 7, 38);\n  display: flex;\n  flex-direction: column;\n  height: 30%;\n  margin: 3% 2%;\n  padding: 4px;\n  font-size: 1.5em;\n  border-radius: 10px;\n  font-style: italic;\n  box-shadow: 0px 0px 6px 4px rgba(116, 8, 31, 0.8);\n\n  span {\n    font-weight: bold;\n    font-style: initial;\n    margin-bottom: 4%;\n  }\n`;\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/Entities.js",["55","56","57","58"],"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = require(\"./interface\");\nconst daysInWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuseday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n];\nclass Shift {\n    constructor(day, week, time, special = false) {\n        this.unavailable = [];\n        this.day = day;\n        this.week = week;\n        this.time = time;\n        this.isSpecial = special;\n        this.timeStamp =\n            week * interface_1.weekInMs +\n                day * interface_1.dayInMS +\n                interface_1.shiftInMS * (time === \"morning\" ? 0 : time === \"noon\" ? 1 : 2);\n    }\n    assignStudent(student) {\n        this.chosen = student;\n        this.chosen.handlePrefOfShift(this, \"assign\");\n        student.addShift(this);\n    }\n    unassignStudent() {\n        this.chosen?.removeShift(this);\n        this.chosen?.handlePrefOfShift(this, \"unassign\");\n        this.chosen = undefined;\n    }\n    addUnavailable(student) {\n        this.unavailable.push(student);\n    }\n    isStudentUnavailable(student) {\n        return this.unavailable.includes(student);\n    }\n    printUnavailable() {\n        const formated = this.unavailable.map((student) => student.name);\n        console.log(formated);\n    }\n    isAdjacent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return (otherShift.timeStamp === this.timeStamp - interface_1.shiftInMS ||\n            otherShift.timeStamp === this.timeStamp + interface_1.shiftInMS);\n    }\n    hasSameStudent(otherShift) {\n        if (otherShift instanceof Shift === false)\n            return false;\n        return otherShift.chosen === this.chosen;\n    }\n    prettyPrintTime() {\n        return `${daysInWeek[this.day]}, ${this.time} week ${this.week + 1}`;\n    }\n}\nexports.Shift = Shift;\nclass Student {\n    constructor(name) {\n        this.shifts = [];\n        this.preferences = [];\n        this.name = name;\n    }\n    addShift(shift) {\n        this.shifts.push(shift);\n    }\n    removeShift(shift) {\n        this.shifts = this.shifts.filter((s) => s != shift);\n    }\n    printShifts() {\n        const formated = this.shifts.map((shift) => {\n            return { day: shift.day, time: shift.time };\n        });\n        console.log(formated);\n    }\n    hasPreference(prefStamp, available) {\n        return this.getPreference(prefStamp, available) !== undefined;\n    }\n    addPreference(preference) {\n        if (preference instanceof Preference === false)\n            throw new Error(`Expected an object of type Preferene but got ${typeof preference} instead`);\n        if (this.preferences.find((pref) => pref.shiftTimeStamp === preference.shiftTimeStamp)) {\n            throw new Error(`A Preference in this time already exists for this student`);\n        }\n        this.preferences.push(preference);\n        return true;\n    }\n    removePreference(shiftToRemoveTimestamp) {\n        const prefIndex = this.preferences.findIndex((pref) => pref.shiftTimeStamp === shiftToRemoveTimestamp);\n        if (prefIndex === -1) {\n            throw new Error(\"Student does not have a preference for this shift\");\n        }\n        console.log(\"here\");\n        this.preferences.splice(prefIndex, 1);\n    }\n    getPreference(stamp, available) {\n        return this.preferences.find((pref) => pref.shiftTimeStamp === stamp && pref.available === available);\n    }\n    getPreferences() {\n        return this.preferences.slice();\n    }\n    handlePrefOfShift(shift, toggle) {\n        const availablePref = this.getPreference(shift.timeStamp, true);\n        const unavailablePref = this.getPreference(shift.timeStamp, false);\n        if (!availablePref && !unavailablePref)\n            return;\n        switch (toggle) {\n            case \"assign\":\n                if (availablePref)\n                    availablePref.handled = true;\n                else\n                    unavailablePref.handled = false;\n                break;\n            case \"unassign\":\n                if (availablePref)\n                    availablePref.handled = false;\n                else\n                    unavailablePref.handled = true;\n                break;\n        }\n    }\n    printPreferences() {\n        this.preferences.map((preference) => console.log(preference));\n    }\n}\nexports.Student = Student;\nclass Preference {\n    constructor(student, shiftTimeStamp, available) {\n        this.student = student;\n        this.shiftTimeStamp = shiftTimeStamp;\n        this.available = available;\n        this.handled = false;\n    }\n    getTimeObject() {\n        const week = Math.floor(this.shiftTimeStamp / interface_1.weekInMs);\n        const day = Math.floor((this.shiftTimeStamp - interface_1.weekInMs * week) / interface_1.dayInMS);\n        const shiftIndex = Math.floor((this.shiftTimeStamp - week * interface_1.weekInMs - day * interface_1.dayInMS) / interface_1.shiftInMS);\n        const time = shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n        return { week, day, time };\n    }\n    getTimeString() {\n        const { week, day, time } = this.getTimeObject();\n        return `${daysInWeek[day]}, ${time}, week ${week + 1}`;\n    }\n}\nexports.Preference = Preference;\nclass OrginizedShiftDay {\n    constructor(morning, noon, evening, ...arr) {\n        this.morning = morning || arr[0];\n        this.noon = noon || arr[1];\n        this.evening = evening || arr[2];\n    }\n    getMorning() {\n        return this.morning;\n    }\n    getNoon() {\n        return this.noon;\n    }\n    getEvening() {\n        return this.evening;\n    }\n    getAllShifts() {\n        return [this.morning, this.noon, this.evening];\n    }\n    getShiftByTime(time) {\n        switch (time) {\n            case \"morning\":\n                return this.morning;\n            case \"noon\":\n                return this.noon;\n            case \"evening\":\n                return this.evening;\n        }\n        console.log(\"Time is ilegal. Should be one of morning, noon, evening\");\n    }\n}\nexports.OrginizedShiftDay = OrginizedShiftDay;\n",["59","60"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/shiftOrginazor.js",["61","62"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/shift_organizer_modules/utils/interface.js",["63"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/components/AddStudent.tsx",["64"],"import React, { useCallback } from \"react\";\nimport Swal from \"sweetalert2\";\nimport {\n  IShiftManager,\n  IStudent,\n} from \"../shift_organizer_modules/utils/interface\";\n\nexport default function AddStudent({\n  addFunction,\n}: {\n  addFunction: (name: string, sm?: IShiftManager) => IStudent | boolean;\n}) {\n  const promptModal = useCallback(async () => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter New Student's Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | IStudent = addFunction(name);\n      if (sucess) {\n        Swal.fire(\"Woohoo!\", `Student ${name} added!`, \"success\");\n      } else {\n        Swal.fire(\"Oops..\", `Student ${name} alredy exists!`, \"error\");\n      }\n    }\n  }, []);\n\n  return <div onClick={promptModal}>Add Student</div>;\n}\n","/home/nitzan/Documents/side-projects/Shift Organizer/src/components/StudentTicket.tsx",["65","66","67"],"/home/nitzan/Documents/side-projects/Shift Organizer/src/reportWebVitals.ts",[],"/home/nitzan/Documents/side-projects/Shift Organizer/src/serviceWorkerRegistration.ts",[],{"ruleId":"68","severity":1,"message":"69","line":45,"column":7,"nodeType":"70","messageId":"71","endLine":45,"endColumn":33},{"ruleId":"68","severity":1,"message":"72","line":46,"column":7,"nodeType":"70","messageId":"71","endLine":46,"endColumn":34},{"ruleId":"68","severity":1,"message":"73","line":47,"column":7,"nodeType":"70","messageId":"71","endLine":47,"endColumn":29},{"ruleId":"68","severity":1,"message":"74","line":48,"column":7,"nodeType":"70","messageId":"71","endLine":48,"endColumn":34},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":55,"column":6,"nodeType":"81","endLine":55,"endColumn":8,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","messageId":"86","endLine":1,"endColumn":14,"fix":"87"},{"ruleId":"88","severity":1,"message":"89","line":71,"column":51,"nodeType":"90","messageId":"91","endLine":71,"endColumn":53},{"ruleId":"92","severity":1,"message":"93","line":110,"column":9,"nodeType":"94","messageId":"95","endLine":123,"endColumn":10},{"ruleId":"92","severity":1,"message":"93","line":169,"column":9,"nodeType":"94","messageId":"95","endLine":176,"endColumn":10},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","messageId":"86","endLine":1,"endColumn":14,"fix":"96"},{"ruleId":"97","severity":1,"message":"98","line":297,"column":10,"nodeType":"70","messageId":"71","endLine":297,"endColumn":33},{"ruleId":"83","severity":1,"message":"84","line":1,"column":1,"nodeType":"85","messageId":"86","endLine":1,"endColumn":14,"fix":"99"},{"ruleId":"79","severity":1,"message":"100","line":33,"column":6,"nodeType":"81","endLine":33,"endColumn":8,"suggestions":"101"},{"ruleId":"79","severity":1,"message":"102","line":90,"column":6,"nodeType":"81","endLine":90,"endColumn":8,"suggestions":"103"},{"ruleId":"79","severity":1,"message":"104","line":117,"column":5,"nodeType":"81","endLine":117,"endColumn":7,"suggestions":"105"},{"ruleId":"79","severity":1,"message":"106","line":142,"column":6,"nodeType":"81","endLine":142,"endColumn":8,"suggestions":"107"},"@typescript-eslint/no-unused-vars","'getRandomDay' is assigned a value but never used.","Identifier","unusedVar","'getRandomWeek' is assigned a value but never used.","'getShift' is assigned a value but never used.","'getAvailable' is assigned a value but never used.","no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'replaceFunc'. Either include it or remove the dependency array. If 'replaceFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["110"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"111","text":"112"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"113","text":"112"},"no-unused-vars","'evaluateCurrentShiftsOf' is defined but never used.",{"range":"114","text":"112"},"React Hook useCallback has a missing dependency: 'addFunction'. Either include it or remove the dependency array. If 'addFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["115"],"React Hook useCallback has a missing dependency: 'addPref'. Either include it or remove the dependency array. If 'addPref' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["116"],"React Hook useCallback has a missing dependency: 'rmvPref'. Either include it or remove the dependency array. If 'rmvPref' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["117"],"React Hook useCallback has a missing dependency: 'rmvStudent'. Either include it or remove the dependency array. If 'rmvStudent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},[0,13],"",[0,13],[0,13],{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [replaceFunc]",{"range":"129","text":"130"},"Update the dependencies array to be: [addFunction]",{"range":"131","text":"132"},"Update the dependencies array to be: [addPref]",{"range":"133","text":"134"},"Update the dependencies array to be: [rmvPref]",{"range":"135","text":"136"},"Update the dependencies array to be: [rmvStudent]",{"range":"137","text":"138"},[1282,1284],"[replaceFunc]",[929,931],"[addFunction]",[2806,2808],"[addPref]",[3631,3633],"[rmvPref]",[4418,4420],"[rmvStudent]"]