{"version":3,"sources":["components/WeekTable.tsx","shift_organizer_modules/utils/interface.ts","shift_organizer_modules/utils/Entities.ts","shift_organizer_modules/shiftOrginazor.ts","components/AddStudent.tsx","components/StudentTicket.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["daysInWeek","WeekTable","shifts","replaceFunc","promptRepModal","useCallback","shift","a","Swal","fire","title","input","showCancelButton","inputPlaceholder","inputValidator","name","value","TableWrapper","map","shiftDay","i","TableColumn","ShiftDay","onClick","getMorning","chosen","getNoon","getEvening","styled","div","dayInMS","weekInMs","shiftInMS","Shift","day","week","time","special","timeStamp","isSpecial","unavailable","this","student","handlePrefOfShift","addShift","removeShift","undefined","push","toRemoveIndex","findIndex","s","splice","includes","formated","console","log","otherShift","Student","preferences","filter","prefStamp","available","getPreference","preference","Preference","Error","find","pref","shiftTimeStamp","shiftToRemoveTimestamp","prefIndex","stamp","slice","toggle","availablePref","unavailablePref","handled","Math","floor","shiftIndex","getTimeObject","OrginizedShiftDay","morning","noon","evening","ShiftManager","students","HeuristicTreshold","WeekendTreshold","initShifts","capitalize","toLowerCase","newStudent","calculateTreshold","length","indexOfStudent","syncShiftsAndStudents","shiftTimestamp","newPref","addPreference","e","removePreference","getShiftByStamp","removeUnavailable","getShiftByTime","getShift","unassignStudent","assignStudent","availablePreferences","unavailablePreferences","forEach","desiredShift","hasPreference","assignStudentToShift","addUnavailable","organizedShifts","csp","maxSteps","treshold","weekendTreshold","SM","current","shiftsAreOrganized","randomConflict","getRandomConflict","minimizeConflictsIn","minConflicts","problems","weekendCounter","sort","b","isAdjacent","prettyPrintTime","isStudentUnavailable","weekShifts","dayShifts","getAllShifts","shiftsWeek","shiftsDay","currentState","legal","numberOfWeekendShifts","shiftWeek","curShift","nextShift","prevShift","hasSameStudent","Object","values","availableShifts","flatMapDepth","index","shiftsArr","random","conflictedShift","leastConflictedStudent","conflicts","getConflictsWith","concat","reduce","sum","curShiftTime","sumStudents","sumShifts","AddStudent","addFunction","promptModal","dayOptions","prev","StudentsDeatails","addPref","rmvPref","rmvStudent","promptAddModal","studentName","html","preConfirm","document","getElementById","checked","formValue","sucess","parseInt","message","promptRmvModal","text","getTimeString","icon","cancelButtonColor","confirmButtonColor","confirmButtonText","then","result","isConfirmed","succeed","promptRmvStudentModal","Wrapper","data-flick","Ticket","className","Header","StyledButton","bgcolor","PrefList","getPreferences","PrefRow","style","fontSize","TrashButton","textAlign","margin","props","span","mockPreferences","addStudent","mockPref","App","useState","getAllStudents","setStudents","shiftsState","setShiftState","displayedWeek","setDisplayedWeek","warnings","getWarnings","WarningMsgContainer","msg","WarningMessage","MainTitle","marginLeft","MainButtonsRow","sm","showDenyButton","denyButtonText","organize","addPreferenceToStudent","removePreferenceFromStudent","removeStudent","ButtonsRow","ArrowButton","opdir","clamp","studentToAssign","getStudent","max","min","h1","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f9aedf2f.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport {\n  IOrganizedShiftDay,\n  IShift,\n  IShiftManager,\n} from \"../shift_organizer_modules/utils/interface\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport default function WeekTable({\n  shifts,\n  replaceFunc,\n}: {\n  shifts: IOrganizedShiftDay[];\n  replaceFunc: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error;\n}) {\n  const promptRepModal = useCallback(async (shift: IShift) => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter Student to Assign Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | Error = replaceFunc(name, shift);\n      if (sucess) {\n        Swal.fire(\n          \"Woohoo!\",\n          `Student ${name} was assigned successfuly!`,\n          \"success\"\n        );\n      } else {\n        Swal.fire(\"Oops..\", `can't assign ${name} to this shift :(`, \"error\");\n      }\n    }\n  }, []);\n\n  return (\n    <TableWrapper>\n      {shifts?.map((shiftDay: IOrganizedShiftDay, i: number) => (\n        <TableColumn>\n          <h2>{daysInWeek[i]}</h2>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getMorning())}>\n            <span>Morning</span>\n            {shiftDay?.getMorning()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getNoon())}>\n            <span>Noon</span>\n            {shiftDay?.getNoon()?.chosen?.name}\n          </ShiftDay>\n          <ShiftDay onClick={() => promptRepModal(shiftDay.getEvening())}>\n            <span>Evening</span>\n            {shiftDay?.getEvening()?.chosen?.name}\n          </ShiftDay>\n        </TableColumn>\n      ))}{\" \"}\n    </TableWrapper>\n  );\n}\n\nconst TableWrapper = styled.div`\n  display: flex;\n  width: 90vw;\n  min-height: 40vh;\n  margin: 0 auto;\n`;\n\nconst TableColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 14%;\n  margin: 0 auto;\n  text-align: center;\n\n  h2 {\n    font-size: 2em;\n    text-shadow: 0px 0px 4px #f7f2f2;\n  }\n`;\n\nconst ShiftDay = styled.div`\n  background-color: rgb(149, 7, 38);\n  display: flex;\n  flex-direction: column;\n  height: 30%;\n  margin: 3% 2%;\n  padding: 4px;\n  font-size: 1.5em;\n  border-radius: 10px;\n  font-style: italic;\n  box-shadow: 0px 0px 6px 4px rgba(116, 8, 31, 0.8);\n\n  span {\n    font-weight: bold;\n    font-style: initial;\n    margin-bottom: 4%;\n  }\n`;\n","export interface IShift {\r\n  day: number;\r\n  week: number;\r\n  time: string;\r\n  timeStamp: number;\r\n  isSpecial: boolean;\r\n  unavailable: IStudent[];\r\n  chosen: undefined | IStudent;\r\n  assignStudent(student: IStudent): void;\r\n  unassignStudent(): void;\r\n  addUnavailable(student: IStudent): void;\r\n  removeUnavailable(student: IStudent): void;\r\n  isStudentUnavailable(student: IStudent): boolean;\r\n  isAdjacent(otherShift: IShift | undefined): boolean;\r\n  hasSameStudent(otherShift: IShift | undefined): boolean;\r\n  prettyPrintTime(): string;\r\n  printUnavailable(): void;\r\n}\r\n\r\nexport interface IStudent {\r\n  name: string;\r\n  shifts: IShift[];\r\n  preferences: IPreference[];\r\n\r\n  addShift(shift: IShift): void;\r\n  removeShift(shift: IShift): void;\r\n  printShifts(): void;\r\n  hasPreference(stamp: number, available: boolean): boolean;\r\n  addPreference(preference: IPreference): boolean | Error;\r\n  removePreference(shiftToRemoveTimestamp: number): void;\r\n  getPreference(stamp: number, available: boolean): IPreference | undefined;\r\n  getPreferences(): IPreference[];\r\n  handlePrefOfShift(shift: IShift, toggle: \"assign\" | \"unassign\"): void;\r\n  printPreferences(): void;\r\n}\r\n\r\nexport interface IPreference {\r\n  student: IStudent;\r\n  available: boolean;\r\n  shiftTimeStamp: number;\r\n  handled: boolean;\r\n\r\n  getTimeObject(): IPreferenceShift;\r\n  getTimeString(): string;\r\n}\r\n\r\nexport interface IPreferenceShift {\r\n  day: number;\r\n  week: number;\r\n  time: string;\r\n}\r\n\r\nexport interface IOrganizedShiftDay {\r\n  getMorning(): IShift;\r\n  getNoon(): IShift;\r\n  getEvening(): IShift;\r\n  getAllShifts(): IShift[];\r\n  getShiftByTime(time: string): IShift | undefined;\r\n}\r\n\r\nexport interface IShiftManager {\r\n  shifts: IOrganizedShiftDay[][];\r\n  students: IStudent[];\r\n  HeuristicTreshold: number;\r\n  organize(): IOrganizedShiftDay[][];\r\n  getWarnings(): string[];\r\n  addStudent(name: string): IStudent | undefined;\r\n  removeStudent(name: string): void;\r\n  getStudent(name: string): IStudent | undefined;\r\n  getAllStudents(): IStudent[];\r\n  getShift(day: number, week: number, time: string): IShift | undefined;\r\n  getShiftByStamp(timestamp: number): IShift | undefined;\r\n  getAllShifts(): IOrganizedShiftDay[][];\r\n  assignStudentToShift(student: IStudent, shift: IShift): void;\r\n  addPreferenceToStudent(\r\n    name: string,\r\n    available: boolean,\r\n    shiftTimeStamp: number\r\n  ): void | boolean;\r\n  removePreferenceFromStudent(\r\n    name: string,\r\n    shiftTimeStamp: number\r\n  ): void | boolean;\r\n}\r\n\r\nexport const hourInMS = 1000 * 60 * 60;\r\nexport const dayInMS = 24 * hourInMS;\r\nexport const weekInMs = 7 * dayInMS;\r\nexport const shiftInMS = 8 * hourInMS;\r\n","import {\n  IShift,\n  IStudent,\n  IPreference,\n  IPreferenceShift,\n  IOrganizedShiftDay,\n  weekInMs,\n  dayInMS,\n  shiftInMS,\n} from \"./interface\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport class Shift implements IShift {\n  day: number;\n  week: number;\n  time: string;\n  timeStamp: number;\n  isSpecial: boolean;\n  unavailable: IStudent[] = [];\n  chosen: IStudent | undefined;\n\n  constructor(day: number, week: number, time: string, special = false) {\n    this.day = day;\n    this.week = week;\n    this.time = time;\n    this.isSpecial = special;\n\n    this.timeStamp =\n      week * weekInMs +\n      day * dayInMS +\n      shiftInMS * (time === \"morning\" ? 0 : time === \"noon\" ? 1 : 2);\n  }\n\n  assignStudent(student: IStudent) {\n    this.chosen = student;\n    this.chosen.handlePrefOfShift(this, \"assign\");\n    student.addShift(this);\n  }\n\n  unassignStudent() {\n    this.chosen?.removeShift(this);\n    this.chosen?.handlePrefOfShift(this, \"unassign\");\n    this.chosen = undefined;\n  }\n\n  addUnavailable(student: IStudent) {\n    this.unavailable.push(student);\n  }\n\n  removeUnavailable(student: IStudent): void {\n    const toRemoveIndex: number = this.unavailable.findIndex(\n      (s: IStudent) => s === student\n    );\n    if (toRemoveIndex === -1) return;\n    this.unavailable.splice(toRemoveIndex, 1);\n  }\n\n  isStudentUnavailable(student: IStudent) {\n    return this.unavailable.includes(student);\n  }\n\n  printUnavailable() {\n    const formated: string[] = this.unavailable.map(\n      (student: IStudent) => student.name as string\n    );\n    console.log(formated);\n  }\n\n  isAdjacent(otherShift: IShift | undefined): boolean {\n    if (otherShift instanceof Shift === false) return false;\n    return (\n      otherShift!.timeStamp === this.timeStamp - shiftInMS ||\n      otherShift!.timeStamp === this.timeStamp + shiftInMS\n    );\n  }\n\n  hasSameStudent(otherShift: IShift | undefined): boolean {\n    if (otherShift instanceof Shift === false) return false;\n    return otherShift!.chosen === this.chosen;\n  }\n\n  prettyPrintTime(): string {\n    return `${daysInWeek[this.day]}, ${this.time} week ${this.week + 1}`;\n  }\n}\n\nexport class Student implements IStudent {\n  name: string;\n  shifts: IShift[] = [];\n  preferences: IPreference[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  addShift(shift: IShift): void {\n    this.shifts.push(shift);\n  }\n\n  removeShift(shift: IShift): void {\n    this.shifts = this.shifts.filter((s: IShift) => s != shift);\n  }\n\n  printShifts() {\n    const formated: Partial<IShift>[] = this.shifts.map((shift: IShift) => {\n      return { day: shift.day, time: shift.time };\n    });\n    console.log(formated);\n  }\n\n  hasPreference(prefStamp: number, available: boolean): boolean {\n    return this.getPreference(prefStamp, available) !== undefined;\n  }\n\n  addPreference(preference: IPreference): Error | boolean {\n    if (preference instanceof Preference === false)\n      throw new Error(\n        `Expected an object of type Preferene but got ${typeof preference} instead`\n      );\n\n    if (\n      this.preferences.find(\n        (pref: IPreference) => pref.shiftTimeStamp === preference.shiftTimeStamp\n      )\n    ) {\n      throw new Error(\n        `A Preference in this time already exists for this student`\n      );\n    }\n    this.preferences.push(preference);\n    return true;\n  }\n\n  removePreference(shiftToRemoveTimestamp: number): void {\n    const prefIndex: number = this.preferences.findIndex(\n      (pref: IPreference) => pref.shiftTimeStamp === shiftToRemoveTimestamp\n    );\n\n    if (prefIndex === -1) {\n      throw new Error(\"Student does not have a preference for this shift\");\n    }\n    console.log(\"here\");\n    this.preferences.splice(prefIndex, 1);\n  }\n\n  getPreference(stamp: number, available: boolean): IPreference | undefined {\n    return this.preferences.find(\n      (pref: IPreference) =>\n        pref.shiftTimeStamp === stamp && pref.available === available\n    );\n  }\n\n  getPreferences(): IPreference[] {\n    return this.preferences.slice();\n  }\n\n  handlePrefOfShift(shift: IShift, toggle: \"assign\" | \"unassign\"): void {\n    const availablePref: IPreference | undefined = this.getPreference(\n      shift.timeStamp,\n      true\n    );\n    const unavailablePref: IPreference | undefined = this.getPreference(\n      shift.timeStamp,\n      false\n    );\n    if (!availablePref && !unavailablePref) return;\n\n    switch (toggle) {\n      case \"assign\":\n        if (availablePref) availablePref.handled = true;\n        else unavailablePref!.handled = false;\n        break;\n      case \"unassign\":\n        if (availablePref) availablePref.handled = false;\n        else unavailablePref!.handled = true;\n        break;\n    }\n  }\n\n  printPreferences() {\n    this.preferences.map((preference: IPreference) => console.log(preference));\n  }\n}\n\nexport class Preference implements IPreference {\n  student: IStudent;\n  shiftTimeStamp: number;\n  available: boolean;\n  handled: boolean;\n\n  constructor(student: IStudent, shiftTimeStamp: number, available: boolean) {\n    this.student = student;\n    this.shiftTimeStamp = shiftTimeStamp;\n    this.available = available;\n    this.handled = false;\n  }\n\n  getTimeObject() {\n    const week: number = Math.floor(this.shiftTimeStamp / weekInMs);\n    const day: number = Math.floor(\n      (this.shiftTimeStamp - weekInMs * week) / dayInMS\n    );\n    const shiftIndex: number = Math.floor(\n      (this.shiftTimeStamp - week * weekInMs - day * dayInMS) / shiftInMS\n    );\n    const time: string =\n      shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\n\n    return { week, day, time };\n  }\n\n  getTimeString() {\n    const { week, day, time } = this.getTimeObject();\n    return `${daysInWeek[day]}, ${time}, week ${week + 1}`;\n  }\n}\n\nexport class OrginizedShiftDay implements IOrganizedShiftDay {\n  private morning: IShift;\n  private noon: IShift;\n  private evening: IShift;\n\n  constructor(\n    morning?: IShift,\n    noon?: IShift,\n    evening?: IShift,\n    ...arr: IShift[]\n  ) {\n    this.morning = morning || arr[0];\n    this.noon = noon || arr[1];\n    this.evening = evening || arr[2];\n  }\n\n  getMorning(): IShift {\n    return this.morning;\n  }\n  getNoon(): IShift {\n    return this.noon;\n  }\n  getEvening(): IShift {\n    return this.evening;\n  }\n  getAllShifts(): IShift[] {\n    return [this.morning, this.noon, this.evening];\n  }\n  getShiftByTime(time: string): IShift | undefined {\n    switch (time) {\n      case \"morning\":\n        return this.morning;\n      case \"noon\":\n        return this.noon;\n      case \"evening\":\n        return this.evening;\n    }\n    console.log(\"Time is ilegal. Should be one of morning, noon, evening\");\n  }\n}\n","import {\r\n  IPreference,\r\n  IStudent,\r\n  IOrganizedShiftDay,\r\n  IShift,\r\n  IShiftManager,\r\n  shiftInMS,\r\n  weekInMs,\r\n  dayInMS,\r\n} from \"./utils/interface\";\r\nimport {\r\n  capitalize,\r\n  flatMap,\r\n  flatMapDeep,\r\n  flatMapDepth,\r\n  flatten,\r\n} from \"lodash\";\r\nimport {\r\n  OrginizedShiftDay,\r\n  Preference,\r\n  Shift,\r\n  Student,\r\n} from \"./utils/Entities\";\r\nimport { debug, error, timeStamp } from \"console\";\r\n\r\nexport default class ShiftManager implements IShiftManager {\r\n  students: IStudent[] = [];\r\n  shifts: IOrganizedShiftDay[][] = [];\r\n  HeuristicTreshold: number;\r\n  WeekendTreshold: number;\r\n\r\n  constructor() {\r\n    this.initShifts();\r\n    this.HeuristicTreshold = 0;\r\n    this.WeekendTreshold = 0;\r\n  }\r\n\r\n  addStudent(name: string): IStudent | undefined {\r\n    name = capitalize(name.toLowerCase());\r\n    const exist: boolean =\r\n      this.students.findIndex((student: IStudent) => student.name === name) !==\r\n      -1;\r\n\r\n    if (exist) {\r\n      throw new Error(\"Student already exist\");\r\n    }\r\n\r\n    const newStudent: IStudent = new Student(name);\r\n    this.students.push(newStudent);\r\n\r\n    this.HeuristicTreshold = calculateTreshold(\r\n      this.students.length,\r\n      this.shifts.length * 7\r\n    );\r\n\r\n    this.WeekendTreshold = (4 * 6) / this.students.length;\r\n\r\n    return newStudent;\r\n  }\r\n\r\n  removeStudent(name: string): void {\r\n    name = capitalize(name.toLowerCase());\r\n    const indexOfStudent = this.students.findIndex(\r\n      (student: IStudent) => student.name === name\r\n    );\r\n\r\n    if (indexOfStudent === -1) {\r\n      throw new Error(\"Student does not exist\");\r\n    }\r\n\r\n    this.students.splice(indexOfStudent, 1);\r\n    this.syncShiftsAndStudents();\r\n    this.HeuristicTreshold = calculateTreshold(\r\n      this.students.length,\r\n      this.shifts.length * 7\r\n    );\r\n    this.WeekendTreshold = (4 * 6) / this.students.length;\r\n\r\n    return;\r\n  }\r\n\r\n  getStudent(name: string): IStudent | undefined {\r\n    name = capitalize(name.toLowerCase());\r\n    return this.students.find((student: IStudent) => student.name === name);\r\n  }\r\n\r\n  getAllStudents(): IStudent[] {\r\n    return this.students.slice();\r\n  }\r\n\r\n  addPreferenceToStudent(\r\n    name: string,\r\n    available: boolean,\r\n    shiftTimestamp: number\r\n  ): void | boolean {\r\n    const student: IStudent | undefined = this.students.find(\r\n      (student: IStudent) => student.name === name\r\n    );\r\n\r\n    if (!student) {\r\n      throw new Error(\"Student does not exist\");\r\n    }\r\n\r\n    if (\r\n      shiftTimestamp < 0 ||\r\n      shiftTimestamp > 4 * weekInMs ||\r\n      shiftTimestamp % shiftInMS !== 0\r\n    ) {\r\n      throw new Error(\r\n        `Timestamp is ilegal. Check it is positive, not larger than ${\r\n          4 * weekInMs\r\n        } and points to the begining of the shift`\r\n      );\r\n    }\r\n\r\n    const newPref: IPreference = new Preference(\r\n      student,\r\n      shiftTimestamp,\r\n      available\r\n    );\r\n    try {\r\n      student.addPreference(newPref);\r\n      return true;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  removePreferenceFromStudent(\r\n    name: string,\r\n    shiftToRemoveTimestamp: number\r\n  ): void | boolean {\r\n    const student: IStudent | undefined = this.students.find(\r\n      (student: IStudent) => student.name === name\r\n    );\r\n\r\n    if (!student) {\r\n      throw new Error(\"Student does not exist\");\r\n    }\r\n\r\n    if (\r\n      shiftToRemoveTimestamp < 0 ||\r\n      shiftToRemoveTimestamp > 4 * weekInMs ||\r\n      shiftToRemoveTimestamp % shiftInMS !== 0\r\n    ) {\r\n      throw new Error(\r\n        `Timestamp is ilegal. Check it is positive, not larger than ${\r\n          4 * weekInMs\r\n        } and points to the begining of the shift`\r\n      );\r\n    }\r\n\r\n    try {\r\n      student.removePreference(shiftToRemoveTimestamp);\r\n      this.getShiftByStamp(shiftToRemoveTimestamp)?.removeUnavailable(student);\r\n      return true;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  getShift(week: number, day: number, time: string): IShift | undefined {\r\n    if (!this.shifts[week - 1]) return undefined;\r\n    return this.shifts[week - 1][day - 1]?.getShiftByTime(time);\r\n  }\r\n\r\n  getShiftByStamp(stamp: number): IShift | undefined {\r\n    const week: number = Math.floor(stamp / weekInMs);\r\n    const day: number = Math.floor((stamp - weekInMs * week) / dayInMS);\r\n    const shiftIndex: number = Math.floor(\r\n      (stamp - week * weekInMs - day * dayInMS) / shiftInMS\r\n    );\r\n    const time: string =\r\n      shiftIndex === 0 ? \"morning\" : shiftIndex === 1 ? \"noon\" : \"evening\";\r\n\r\n    return this.getShift(week + 1, day + 1, time);\r\n  }\r\n\r\n  getAllShifts(): IOrganizedShiftDay[][] {\r\n    return this.shifts.slice();\r\n  }\r\n\r\n  assignStudentToShift(student: IStudent, shift: IShift): void {\r\n    shift.unassignStudent();\r\n    shift.assignStudent(student);\r\n  }\r\n\r\n  organize(): IOrganizedShiftDay[][] {\r\n    const shifts: IOrganizedShiftDay[][] = this.shifts;\r\n    const students: IStudent[] = this.students;\r\n    const availablePreferences: IPreference[] = [];\r\n    const unavailablePreferences: IPreference[] = [];\r\n\r\n    students.forEach((student: IStudent) =>\r\n      student.preferences.forEach((preference: IPreference) => {\r\n        if (preference.available) {\r\n          availablePreferences.push(preference);\r\n        } else {\r\n          unavailablePreferences.push(preference);\r\n        }\r\n      })\r\n    );\r\n\r\n    //first, assign all available preferences\r\n    availablePreferences.forEach((pref: IPreference) => {\r\n      const {\r\n        week,\r\n        day,\r\n        time,\r\n      }: { week: number; day: number; time: string } = pref.getTimeObject();\r\n\r\n      const desiredShift: IShift = this.getShift(week + 1, day + 1, time)!;\r\n      if (desiredShift.chosen) {\r\n        if (\r\n          desiredShift.chosen.hasPreference(pref.shiftTimeStamp, pref.available)\r\n        )\r\n          return;\r\n      }\r\n      this.assignStudentToShift(pref.student, desiredShift);\r\n    });\r\n\r\n    // assign all unavailable preferences\r\n    unavailablePreferences.forEach((pref: IPreference) => {\r\n      const {\r\n        week,\r\n        day,\r\n        time,\r\n      }: { week: number; day: number; time: string } = pref.getTimeObject();\r\n\r\n      const undesiredShift: IShift = shifts[week][day].getShiftByTime(time)!;\r\n      undesiredShift.addUnavailable(pref.student);\r\n      pref.handled = true;\r\n    });\r\n\r\n    // assign all other students to shifts\r\n    const organizedShifts: IOrganizedShiftDay[][] = minConflicts(\r\n      shifts,\r\n      students,\r\n      1000,\r\n      this.HeuristicTreshold,\r\n      this.WeekendTreshold,\r\n      this\r\n    );\r\n    this.shifts = organizedShifts;\r\n    console.log(this.HeuristicTreshold);\r\n    return organizedShifts;\r\n  }\r\n\r\n  // returns all problems with current solution\r\n  getWarnings(): string[] {\r\n    // Possible problems:\r\n    // - 2 shifts in a row\r\n    // - too many weekend shifts\r\n    // - assigned to a shift he asked not to\r\n\r\n    const problems: string[] = [];\r\n\r\n    for (let student of this.students) {\r\n      let weekendCounter: number = 0;\r\n      student.shifts.sort((a: IShift, b: IShift) => a.timeStamp - b.timeStamp);\r\n\r\n      for (let i: number = 0; i < student.shifts.length; i++) {\r\n        if (student.shifts[i].isAdjacent(student.shifts[i + 1]))\r\n          problems.push(\r\n            `Student ${student.name} has consecutive shifts on ${student.shifts[\r\n              i\r\n            ].prettyPrintTime()}`\r\n          );\r\n        if (student.shifts[i].isStudentUnavailable(student))\r\n          problems.push(\r\n            `Student ${student.name} was assigned a shift on ${student.shifts[\r\n              i\r\n            ].prettyPrintTime()}, but preferes not to`\r\n          );\r\n        if (student.shifts[i].isSpecial) weekendCounter++;\r\n      }\r\n      if (weekendCounter > this.WeekendTreshold + 1)\r\n        problems.push(\r\n          `Student ${\r\n            student.name\r\n          } Has ${weekendCounter} weekend Shifts. ${Math.floor(\r\n            weekendCounter - this.WeekendTreshold\r\n          )} more than allowed.`\r\n        );\r\n    }\r\n\r\n    return problems;\r\n  }\r\n\r\n  private initShifts(): void {\r\n    this.shifts = [0, 1, 2, 3].map((week: number) =>\r\n      [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\r\n        return day >= 5\r\n          ? new OrginizedShiftDay(\r\n              new Shift(day, week, \"morning\", true),\r\n              new Shift(day, week, \"noon\", true),\r\n              new Shift(day, week, \"evening\", true)\r\n            )\r\n          : new OrginizedShiftDay(\r\n              new Shift(day, week, \"morning\"),\r\n              new Shift(day, week, \"noon\"),\r\n              new Shift(day, week, \"evening\")\r\n            );\r\n      })\r\n    );\r\n  }\r\n\r\n  private syncShiftsAndStudents(): void {\r\n    //Unassigns students who no longer exist in student list from shifts\r\n    // this.shifts = this.shifts.map((shiftsWeek:IOrganizedShiftDay[])=>shiftsWeek.map((shiftDay:IOrganizedShiftDay)=>shift))\r\n    for (let weekShifts of this.shifts) {\r\n      for (let dayShifts of weekShifts) {\r\n        for (let shift of dayShifts.getAllShifts()) {\r\n          if (!shift.chosen) continue;\r\n          if (!this.students.includes(shift.chosen)) {\r\n            shift.unassignStudent();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private cloneShifts(): IOrganizedShiftDay[][] {\r\n    // created a copy for min conflicts to work on and modify.\r\n    return this.shifts.map((shiftsWeek: IOrganizedShiftDay[]) =>\r\n      shiftsWeek.map(\r\n        (shiftsDay) =>\r\n          new OrginizedShiftDay(\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            ...shiftsDay\r\n              .getAllShifts()\r\n              .map(\r\n                (shift: IShift) =>\r\n                  new Shift(shift.day, shift.week, shift.time, shift.isSpecial)\r\n              )\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  private cloneStudents(): IStudent[] {\r\n    return this.students.map((student: IStudent) => {\r\n      const copyStudent = new Student(student.name);\r\n      return copyStudent;\r\n    });\r\n  }\r\n}\r\n\r\nfunction minConflicts(\r\n  csp: IOrganizedShiftDay[][],\r\n  students: IStudent[],\r\n  maxSteps: number,\r\n  treshold: number,\r\n  weekendTreshold: number,\r\n  SM: IShiftManager\r\n): IOrganizedShiftDay[][] {\r\n  let current = csp;\r\n\r\n  for (let i = 1; i < maxSteps; i++) {\r\n    console.log(i);\r\n    if (shiftsAreOrganized(current, weekendTreshold, SM)) return current;\r\n    let randomConflict = getRandomConflict(csp, weekendTreshold);\r\n    let value = minimizeConflictsIn(randomConflict, students, weekendTreshold);\r\n\r\n    SM.assignStudentToShift(value, randomConflict);\r\n  }\r\n\r\n  return current;\r\n}\r\n\r\nfunction shiftsAreOrganized(\r\n  currentState: IOrganizedShiftDay[][],\r\n  weekendTreshold: number,\r\n  SM: IShiftManager\r\n): boolean {\r\n  // checks if current shifts in state are fine organized:\r\n  let legal = true;\r\n  const numberOfWeekendShifts: any = {};\r\n  for (let shiftWeek of currentState) {\r\n    for (let shiftDay of shiftWeek) {\r\n      for (let curShift of shiftDay.getAllShifts()) {\r\n        if (!curShift.chosen) {\r\n          legal = false;\r\n          break;\r\n        }\r\n        if (curShift.isStudentUnavailable(curShift.chosen)) {\r\n          legal = false;\r\n          break;\r\n        }\r\n\r\n        if (curShift.isSpecial) {\r\n          numberOfWeekendShifts[curShift.chosen.name] = numberOfWeekendShifts[\r\n            curShift.chosen.name\r\n          ]\r\n            ? numberOfWeekendShifts[curShift.chosen.name] + 1\r\n            : 1;\r\n        }\r\n        const nextShift = SM.getShiftByStamp(curShift.timeStamp + shiftInMS);\r\n        const prevShift = SM.getShiftByStamp(curShift.timeStamp - shiftInMS);\r\n\r\n        if (\r\n          curShift.hasSameStudent(nextShift) ||\r\n          curShift.hasSameStudent(prevShift)\r\n        ) {\r\n          legal = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (legal) {\r\n    console.log(numberOfWeekendShifts);\r\n    for (let value of Object.values(numberOfWeekendShifts))\r\n      if ((value as number) > weekendTreshold + 1) {\r\n        legal = false;\r\n        break;\r\n      }\r\n  }\r\n  return legal;\r\n}\r\n\r\nfunction getRandomConflict(\r\n  csp: IOrganizedShiftDay[][],\r\n  weekendTreshold: number\r\n): IShift {\r\n  // get a random unassigned shift\r\n  let availableShifts: IShift[] = flatMapDepth(\r\n    csp,\r\n    (shiftWeek: IOrganizedShiftDay[]) =>\r\n      shiftWeek.map((shiftDay: IOrganizedShiftDay) => shiftDay.getAllShifts()),\r\n    2\r\n  ).filter((shift: IShift) => !shift.chosen);\r\n\r\n  if (!availableShifts.length) {\r\n    availableShifts = flatMapDepth(\r\n      csp,\r\n      (shiftWeek: IOrganizedShiftDay[]) =>\r\n        shiftWeek.map((shiftDay: IOrganizedShiftDay) =>\r\n          shiftDay.getAllShifts()\r\n        ),\r\n      2\r\n    ).filter(\r\n      (shift: IShift, index: number, shiftsArr: IShift[]) =>\r\n        shift.hasSameStudent(shiftsArr[index + 1]) ||\r\n        shift.hasSameStudent(shiftsArr[index - 1]) ||\r\n        shift.isStudentUnavailable(shift.chosen!) ||\r\n        (shift.isSpecial &&\r\n          shift.chosen!.shifts.filter((s: IShift) => s.isSpecial).length >\r\n            weekendTreshold)\r\n    );\r\n  }\r\n\r\n  return availableShifts[Math.floor(Math.random() * availableShifts.length)];\r\n}\r\n\r\nfunction minimizeConflictsIn(\r\n  conflictedShift: IShift,\r\n  students: IStudent[],\r\n  weekendTreshold: number\r\n): IStudent {\r\n  // assign a student that will minimize the conflicts\r\n  const conflictsOfStudents: {\r\n    conflicts: number;\r\n    student: IStudent;\r\n  }[] = students.map((student: IStudent) => {\r\n    return {\r\n      conflicts: getConflictsWith(student, conflictedShift, weekendTreshold),\r\n      student,\r\n    };\r\n  });\r\n\r\n  const leastConflictedStudent: {\r\n    conflicts: number;\r\n    student: IStudent;\r\n  } = conflictsOfStudents.sort((a, b) => a.conflicts - b.conflicts)[0];\r\n\r\n  console.log(leastConflictedStudent);\r\n  return leastConflictedStudent.student;\r\n}\r\n\r\nfunction getConflictsWith(\r\n  student: IStudent,\r\n  shift: IShift,\r\n  WeekendTreshold: number\r\n): number {\r\n  // sum of shift count between the student's shifts\r\n  if (student.shifts.length <= 1) {\r\n    return shift.isAdjacent(student.shifts[0]) ? 1 : 0;\r\n  }\r\n\r\n  if (shift.isStudentUnavailable(student)) return 1;\r\n\r\n  if (\r\n    shift.isSpecial &&\r\n    student.shifts.filter((shift: IShift) => shift.isSpecial).length >\r\n      WeekendTreshold\r\n  )\r\n    return 1;\r\n\r\n  const distanceBetweenShifts: number = student.shifts\r\n    .map((shift: IShift) => shift.timeStamp)\r\n    .concat(shift.timeStamp)\r\n    .sort((a: number, b: number) => a - b)\r\n    .reduce(\r\n      (\r\n        sum: number,\r\n        curShiftTime: number,\r\n        index: number,\r\n        shiftsArr: number[]\r\n      ) => {\r\n        if (index === shiftsArr.length - 1) return sum;\r\n        return sum + (shiftsArr[index + 1] - curShiftTime) / shiftInMS;\r\n      },\r\n      0\r\n    );\r\n\r\n  return 1 / (distanceBetweenShifts / student.shifts.length);\r\n}\r\n\r\nfunction evaluateCurrentShiftsOf(student: IStudent) {\r\n  if (student.shifts.length <= 1) return 1;\r\n\r\n  return (\r\n    1 /\r\n    student.shifts\r\n      .map((shift: IShift) => shift.timeStamp)\r\n      .sort((a: number, b: number) => a - b)\r\n      .reduce(\r\n        (\r\n          sum: number,\r\n          curShiftTime: number,\r\n          index: number,\r\n          shiftsArr: number[]\r\n        ) => {\r\n          if (index === shiftsArr.length - 1) return sum;\r\n          return sum + (shiftsArr[index + 1] - curShiftTime) / shiftInMS;\r\n        },\r\n        0\r\n      )\r\n  );\r\n}\r\n\r\nfunction calculateTreshold(sumStudents: number, sumShifts: number): number {\r\n  return 1 / (sumStudents - 1);\r\n}\r\n\r\n//#region nothing to see here ...\r\n// function initShifts(): IOrganizedShiftDay[] {\r\n//   class OrginizedShiftDay implements IOrganizedShiftDay {\r\n//     private morning: IShift;\r\n//     private noon: IShift;\r\n//     private evening: IShift;\r\n\r\n//     constructor(morning: IShift, noon: IShift, evening: IShift) {\r\n//       this.morning = morning;\r\n//       this.noon = noon;\r\n//       this.evening = evening;\r\n//     }\r\n\r\n//     getMorning(): IShift {\r\n//       return this.morning;\r\n//     }\r\n//     getNoon(): IShift {\r\n//       return this.noon;\r\n//     }\r\n//     getEvening(): IShift {\r\n//       return this.evening;\r\n//     }\r\n//     getAllShifts(): IShift[] {\r\n//       return [this.morning, this.noon, this.evening];\r\n//     }\r\n//   }\r\n\r\n//   // return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\r\n//   // return {\r\n//   // getMorning: () => new Shift(day, \"morning\"),\r\n//   //\r\n//   // morning: new Shift(day, \"morning\"),\r\n//   // noon: new Shift(day, \"noon\"),\r\n//   // evening: new Shift(day, \"evening\"),\r\n//   // getShiftIterator: () => [],\r\n//   // };\r\n//   // });\r\n//   // }\r\n\r\n//   return [0, 1, 2, 3, 4, 5, 6].map((day: number) => {\r\n//     return new OrginizedShiftDay(\r\n//       new Shift(day, \"morning\"),\r\n//       new Shift(day, \"noon\"),\r\n//       new Shift(day, \"evening\")\r\n//     );\r\n//   });\r\n// }\r\n\r\n// const names: string[] = [\r\n//   \"Nitzan\",\r\n//   \"Nadav\",\r\n//   \"Asaf\",\r\n//   \"Shimon\",\r\n//   \"Anna\",\r\n//   \"Idan\",\r\n//   \"Danel\",\r\n//   \"Lahav\",\r\n//   \"Sean\",\r\n//   \"Omri\",\r\n// ];\r\n// const getRandomDay: () => number = () => Math.floor(Math.random() * 7);\r\n// const getShift: () => string = () =>\r\n//   [\"morning\", \"noon\", \"evening\"][Math.floor(Math.random() * 3)];\r\n// const getAvailable: () => boolean = () =>\r\n//   Boolean(Math.floor(Math.random() * 2));\r\n\r\n// const students: IStudent[] = names.map((name: string) => {\r\n//   const newStudent: IStudent = new Student(name);\r\n//   const pref: IPreference = new Preference(\r\n//     newStudent,\r\n//     { day: getRandomDay(), time: getShift() },\r\n//     getAvailable()\r\n//   );\r\n//   newStudent.addPreference(pref);\r\n//   return newStudent;\r\n// });\r\n\r\n// const sm = new ShiftManager();\r\n// console.log(sm.organize(students, 3).forEach((day) => console.log(day)));\r\n// students.forEach((student) => student.printPreferences());\r\n//#endregion\r\n","import React, { useCallback } from \"react\";\nimport Swal from \"sweetalert2\";\nimport {\n  IShiftManager,\n  IStudent,\n} from \"../shift_organizer_modules/utils/interface\";\n\nexport default function AddStudent({\n  addFunction,\n}: {\n  addFunction: (name: string, sm?: IShiftManager) => IStudent | boolean;\n}) {\n  const promptModal = useCallback(async () => {\n    const { value: name } = await Swal.fire({\n      title: \"Enter New Student's Name\",\n      input: \"text\",\n      showCancelButton: true,\n      inputPlaceholder: \"Name...\",\n      inputValidator: (name: string) => {\n        if (!name) return \"Please enter a valid name\";\n        return null;\n      },\n    });\n\n    if (name) {\n      const sucess: boolean | IStudent = addFunction(name);\n      if (sucess) {\n        Swal.fire(\"Woohoo!\", `Student ${name} added!`, \"success\");\n      } else {\n        Swal.fire(\"Oops..\", `Student ${name} alredy exists!`, \"error\");\n      }\n    }\n  }, []);\n\n  return <div onClick={promptModal}>Add Student</div>;\n}\n","import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport {\n  dayInMS,\n  IPreference,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"../shift_organizer_modules/utils/interface\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport { RiCloseLine, RiCheckFill } from \"react-icons/ri\";\n\nconst daysInWeek: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuseday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst dayOptions: string = [0, 1, 2, 3, 4, 5, 6].reduce(\n  (prev: string, i: number) =>\n    prev + `<option value=${i}>${daysInWeek[i]}</option>`,\n  \"\"\n);\n\nexport default function StudentsDeatails({\n  students,\n  addPref,\n  rmvPref,\n  rmvStudent,\n}: {\n  students: IStudent[];\n  addPref: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | Error;\n  rmvPref: (studentName: string, shiftTimeStamp: number) => boolean | Error;\n  rmvStudent: (studentName: string) => boolean | Error;\n}) {\n  const promptAddModal = useCallback(async (studentName: string) => {\n    const { value: formValue } = await Swal.fire({\n      title: \"Enter Preference Details\",\n      html:\n        `<br/>` +\n        `<em>Week</em> <select id=\"pref-modal-week\">${[0, 1, 2, 3].reduce(\n          (prev: string, i: number) =>\n            prev + `<option value=${i}>week ${i + 1}</option>`,\n          \"\"\n        )}<select>  ` +\n        `<em>Day</em> <select id=\"pref-modal-day\">${dayOptions}<select>   ` +\n        `<em>Shift</em> <select id=\"pref-modal-time\"><option value=0>morning</option><option value=1>noon</option><option value=2>evening</option><select>` +\n        `<br/><br/><input type=\"checkbox\" id=\"pref-modal-av\" class=\"swal-input\">  <em>Available</em></input>`,\n      showCancelButton: true,\n      preConfirm: () => {\n        return [\n          //@ts-ignore\n          document.getElementById(\"pref-modal-week\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-day\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-time\")?.value,\n          //@ts-ignore\n          document.getElementById(\"pref-modal-av\")?.checked,\n        ];\n      },\n    });\n\n    if (formValue) {\n      const sucess: boolean | Error = addPref(\n        studentName,\n        weekInMs * parseInt(formValue[0]) +\n          dayInMS * parseInt(formValue[1]) +\n          shiftInMS * parseInt(formValue[2]),\n        formValue[3]\n      );\n      if (sucess === true) {\n        Swal.fire(\"Woohoo!\", `Preference was added!`, \"success\");\n      } else {\n        if (sucess instanceof Error)\n          Swal.fire(\"Oops...\", sucess.message, \"error\");\n        else Swal.fire(\"Oops...\", \"Unknown error occured :( \\n Sorry...\");\n      }\n    }\n  }, []);\n\n  const promptRmvModal = useCallback(\n    async (pref: IPreference, student: IStudent) => {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: `Delete prefrence ${pref.getTimeString()} for ${student.name}?`,\n        icon: \"warning\",\n        showCancelButton: true,\n        cancelButtonColor: \"#3085d6\",\n        confirmButtonColor: \"#d33\",\n        confirmButtonText: \"Delete\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          const succeed: boolean | Error = rmvPref(\n            student.name,\n            pref.shiftTimeStamp\n          );\n          if (succeed === true) {\n            Swal.fire(\"Deleted!\", \"\", \"success\");\n          } else {\n            console.log(succeed);\n            Swal.fire(\"oops...\", \"\", \"error\");\n          }\n        }\n      });\n    },\n    []\n  );\n\n  const promptRmvStudentModal = useCallback(async (studentName: string) => {\n    Swal.fire({\n      title: `Delete student ${studentName}?`,\n      text: `This is irreversiable!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      cancelButtonColor: \"#3085d6\",\n      confirmButtonColor: \"#d33\",\n      confirmButtonText: \"Delete\",\n    }).then((result: SweetAlertResult) => {\n      if (result.isConfirmed) {\n        const succeed: boolean | Error = rmvStudent(studentName);\n        if (succeed === true) {\n          Swal.fire(\"OK\", `Student ${studentName} deleted`, \"success\");\n        } else {\n          if (succeed instanceof Error) {\n            console.log(succeed);\n            Swal.fire(\"oops...\", succeed.message, \"error\");\n          }\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <Wrapper data-flick>\n      {students.length > 0 ? (\n        students.map((student: IStudent) => (\n          <Ticket key={`student-${student.name}`} className=\"caroucell\">\n            <Header>\n              <h3>{student.name}</h3>\n              <StyledButton\n                bgcolor=\"#5f0101\"\n                onClick={() => promptRmvStudentModal(student.name)}\n              >\n                Remove Student\n              </StyledButton>\n            </Header>\n            <PrefList>\n              {student.getPreferences().map((pref: IPreference, i: number) => (\n                <PrefRow\n                  key={`pref-${student.name}-${i}`}\n                  available={pref.available}\n                >\n                  {pref.handled ? (\n                    <RiCheckFill style={{ fontSize: \"1.5em\" }} />\n                  ) : (\n                    <RiCloseLine style={{ fontSize: \"1.5em\" }} />\n                  )}\n                  {pref.getTimeString()}\n                  <TrashButton onClick={() => promptRmvModal(pref, student)}>\n                    <FaTrashAlt />\n                  </TrashButton>\n                </PrefRow>\n              ))}\n            </PrefList>\n            {/* @ts-ignore */}\n            <StyledButton onClick={() => promptAddModal(student.name)}>\n              Add Pref\n            </StyledButton>\n          </Ticket>\n        ))\n      ) : (\n        <span\n          style={{ textAlign: \"center\", fontSize: \"1.5em\", margin: \"0 auto\" }}\n        >\n          No Students Exist\n        </span>\n      )}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  /* background-color: red; */\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 99%;\n  height: 28vh;\n  min-height: 24vh;\n  margin: auto;\n  overflow-x: auto;\n  ::-webkit-scrollbar {\n    height: 5px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: rgba(15, 15, 15, 0.6);\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst Ticket = styled.div`\n  background-color: rgb(23, 20, 20);\n  color: wheat;\n  display: flex;\n  flex-direction: column;\n  margin: 10px 2vw;\n  min-width: 20%;\n  width: 20%;\n  height: 82%;\n  padding: 8px 12px;\n  border-radius: 5px;\n  box-shadow: -3px 4px 8px 2px rgba(240, 250, 252, 0.8);\n`;\n\nconst Header = styled.div`\n  display: grid;\n  align-items: flex-end;\n  grid-template-columns: 3fr 1.8fr;\n  margin-bottom: 10px;\n  h3 {\n    margin: 3%;\n    font-size: 2.2em;\n  }\n`;\nconst PrefList = styled.div`\n  /* background-color: green; */\n  height: 65%;\n  overflow-y: auto;\n  ::-webkit-scrollbar {\n    width: 2px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\nconst PrefRow = styled.div`\n  background-color: ${(props: { available: boolean }) =>\n    props.available ? \"#1a641e\" : \"rgb(126,5,5)\"};\n  display: grid;\n  align-items: center;\n  grid-template-columns: 1fr 8fr 1fr;\n  margin: 1% 0;\n  padding: 1% 2%;\n`;\nconst TrashButton = styled.span`\n  color: rgb(238, 34, 56);\n  font-size: 1.2em;\n  cursor: pointer;\n  margin: 0 auto;\n\n  :hover {\n  }\n`;\nconst StyledButton = styled.span`\n  background-color: ${(props: { bgcolor: string }) =>\n    props.bgcolor ? props.bgcolor : \"#928619\"};\n  color: #e0dede;\n  width: fit-content;\n  height: fit-content;\n  padding: 8px 5px;\n  border-radius: 10px;\n  font-size: 0.9em;\n  cursor: pointer;\n`;\n","import WeekTable from \"./components/WeekTable\";\nimport { Preference } from \"./shift_organizer_modules/utils/Entities\";\nimport {\n  dayInMS,\n  IOrganizedShiftDay,\n  IPreference,\n  IShift,\n  IShiftManager,\n  IStudent,\n  shiftInMS,\n  weekInMs,\n} from \"./shift_organizer_modules/utils/interface\";\nimport ShiftManager from \"./shift_organizer_modules/shiftOrginazor\";\nimport { useState } from \"react\";\nimport AddStudent from \"./components/AddStudent\";\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\nimport StudentsDeatails from \"./components/StudentTicket\";\nimport { FaCaretLeft, FaCaretRight } from \"react-icons/fa\";\nimport { IoCalendarOutline } from \"react-icons/io5\";\nimport { IoIosWarning } from \"react-icons/io\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nconst names: string[] = [\n  \"Nitzan\",\n  \"Nadav\",\n  \"Asaf\",\n  \"Shimon\",\n  \"Anna\",\n  \"Lahav\",\n  \"Idan\",\n  // \"Danel\",\n  // \"Sean\",\n  // \"Omri\",\n];\n\nconst mockPreferences: any = [\n  { week: 0, day: 0, shift: 0, available: true },\n  { week: 0, day: 0, shift: 0, available: true },\n  { week: 0, day: 3, shift: 1, available: false },\n  { week: 0, day: 6, shift: 2, available: false },\n  { week: 0, day: 2, shift: 0, available: true },\n  { week: 0, day: 4, shift: 2, available: false },\n  { week: 0, day: 5, shift: 1, available: false },\n];\nconst getRandomDay: () => number = () => Math.floor(Math.random() * 7) + 1;\nconst getRandomWeek: () => number = () => Math.floor(Math.random() * 0) + 1;\nconst getShift: () => number = () => Math.floor(Math.random() * 3);\nconst getAvailable: () => boolean = () =>\n  Boolean(Math.floor(Math.random() * 2));\n\nconst SM = new ShiftManager();\n\nnames.forEach((name: string, i: number) => {\n  const newStudent: IStudent = SM.addStudent(name)!;\n  const mockPref: any = mockPreferences[i];\n  const pref: IPreference = new Preference(\n    newStudent,\n    mockPref.week * weekInMs +\n      mockPref.day * dayInMS +\n      mockPref.shift * shiftInMS,\n    mockPref.available\n  );\n  newStudent.addPreference(pref);\n});\n\nfunction App() {\n  const [students, setStudents] = useState<IStudent[]>(SM.getAllStudents());\n  const [shiftsState, setShiftState] = useState<IOrganizedShiftDay[][]>(\n    SM.getAllShifts()\n  );\n  const [displayedWeek, setDisplayedWeek] = useState<number>(0);\n\n  // Adds a new student to the shift Manager\n  const addStudent: (name: string, sm?: IShiftManager) => IStudent | boolean = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      const newStudent: IStudent = sm.addStudent(name)!;\n      setStudents(sm.getAllStudents());\n      return newStudent;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  const removeStudent: (name: string, sm?: IShiftManager) => boolean | Error = (\n    name: string,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removeStudent(name);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  };\n\n  const addPreferenceToStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    available?: boolean,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    available: boolean = true,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.addPreferenceToStudent(studentName, available, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const removePreferenceFromStudent: (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shiftTimeStamp: number,\n    sm: IShiftManager = SM\n  ) => {\n    try {\n      sm.removePreferenceFromStudent(studentName, shiftTimeStamp);\n      setStudents(sm.getAllStudents());\n      return true;\n    } catch (e) {\n      return e;\n    }\n  };\n\n  const replaceStudent: (\n    studentName: string,\n    shift: IShift,\n    sm?: IShiftManager\n  ) => boolean | Error = (\n    studentName: string,\n    shift: IShift,\n    sm: IShiftManager = SM\n  ) => {\n    const studentToAssign: IStudent | undefined = sm.getStudent(studentName);\n    if (!studentToAssign) return false;\n\n    sm.assignStudentToShift(studentToAssign, shift);\n\n    setStudents(sm.getAllStudents());\n    return true;\n  };\n\n  const organizeShifts: () => void = () => {\n    if (students.length < 1) {\n      Swal.fire(\n        \"Sorry\",\n        \"You need to have at least one student to organize shifts\",\n        \"info\"\n      );\n      return;\n    }\n    if (students.length < 7) {\n      Swal.fire({\n        title: \"Hey!\",\n        text: `Only ${students.length} ${\n          students.length > 1 ? \"students are\" : \"student is\"\n        } saved in the system. Procceed?`,\n        showDenyButton: true,\n        confirmButtonText: \"Yes\",\n        denyButtonText: \"No\",\n      }).then((result: SweetAlertResult) => {\n        if (result.isConfirmed) {\n          SM.organize();\n          setShiftState(SM.getAllShifts());\n        }\n      });\n    } else {\n      SM.organize();\n      setShiftState(SM.getAllShifts());\n    }\n  };\n\n  const handleLeft: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev - 1));\n\n  const handleRight: () => void = () =>\n    setDisplayedWeek((prev: number) => clamp(3, 0, prev + 1));\n\n  const warnings: string[] = SM.getWarnings();\n\n  return (\n    <>\n      <WarningMsgContainer>\n        {warnings.map((msg: string) => (\n          <WarningMessage>\n            <IoIosWarning style={{ margin: \"0 10px\", fontSize: \"1.2em\" }} />\n            {msg}\n          </WarningMessage>\n        ))}\n      </WarningMsgContainer>\n      <MainTitle>\n        Shift Organizer <IoCalendarOutline style={{ marginLeft: \"1vw\" }} />\n      </MainTitle>\n      <MainButtonsRow>\n        <AddStudent addFunction={addStudent} />\n        <div onClick={organizeShifts}>Organize!</div>\n      </MainButtonsRow>\n      <StudentsDeatails\n        students={students}\n        addPref={addPreferenceToStudent}\n        rmvPref={removePreferenceFromStudent}\n        rmvStudent={removeStudent}\n      />\n      <ButtonsRow>\n        <ArrowButton opdir={false} onClick={handleLeft}>\n          <FaCaretLeft />\n        </ArrowButton>\n        <span>Week {displayedWeek + 1}</span>\n        <ArrowButton opdir={true} onClick={handleRight}>\n          <FaCaretRight />\n        </ArrowButton>\n      </ButtonsRow>\n      <WeekTable\n        shifts={shiftsState[displayedWeek]}\n        replaceFunc={replaceStudent}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n//helpers\nfunction clamp(max: number, min: number, value: number): number {\n  return Math.max(min, Math.min(max, value));\n}\nconst MainTitle = styled.h1`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 3.8em;\n  margin-bottom: 3vh;\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 2vh;\n  span {\n    font-size: 2em;\n    height: 100%;\n  }\n`;\n\nconst MainButtonsRow = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 1.5vh;\n  div {\n    background-color: wheat;\n    color: rgb(149, 7, 38);\n    font-weight: bold;\n    padding: 14px 8px;\n    width: fit-content;\n    font-size: 1.1em;\n    border-radius: 15px;\n    margin: 0 1vw;\n    cursor: pointer;\n    transition: 0.1s ease-in-out;\n  }\n\n  div:hover {\n    transform: translate(0px, -5px);\n    box-shadow: 0px 0px 4px 4px rgba(236, 234, 197, 0.8);\n  }\n`;\n\nconst ArrowButton = styled.div`\n  font-size: 3em;\n  margin: 0 2vw;\n  cursor: pointer;\n  transition: 0.15s ease-in-out;\n\n  :hover {\n    transform: translate(\n      ${(props: { opdir: boolean }) => (props.opdir ? \"5px\" : \"-5px\")},\n      0\n    );\n  }\n`;\n\nconst WarningMsgContainer = styled.div`\n  position: absolute;\n  width: 100vw;\n  top: 0;\n  z-index: 2;\n`;\nconst WarningMessage = styled.div`\n  background-color: rgba(238, 106, 18, 0.65);\n  color: #3d0101;\n  width: 8vw;\n  height: 2vh;\n  margin: 0.5vh;\n  padding: 6px 5px;\n  border-radius: 5px;\n  font-size: 0.9em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  transition: 0.2s ease-in-out;\n\n  :hover {\n    width: fit-content;\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}